[
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this hands-on exercise, I learn how to\n\nimport and wrangle geospatial data using appropriate R packages\nproject geospatial data to another coordinate system\nimport and converting aspatial data\nplot choropleth map"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "1 Getting Started",
    "text": "1 Getting Started\np_load function of pacman package is used to install and load sf and tidyverse packages into R environment.\n\npacman::p_load(sf, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "2 Importing Geospatial Data",
    "text": "2 Importing Geospatial Data\n\n2.1 Importing polygon feature data\nst_read() function of sf package imports shapefile into R as a polygon feature data frame.\nNote that dsn defines the data path, and layer is the shapefile name.\nNote that no extension such as .shp, .dbf, .prj and .shx are needed.\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\zong-you-1\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nNote that MP14_SUBZONE_WEB_PL is multipolyon.\n\ncyclingpath <- st_read(dsn = \"data/geospatial\", layer = \"CyclingPath\")\n\nReading layer `CyclingPath' from data source \n  `C:\\zong-you-1\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 1625 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 12711.19 ymin: 28711.33 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\nNote that CyclingPath is multilinestring.\n\n\n2.2 Importing GIS data in kml format\nNote that complete path and kml file extension were provided.\n\npreschool <- st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\zong-you-1\\ISSS624\\Hands-on_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nNote that preschool is point feature data frame.\nGuide says preschool is in wgs84 coordinates system, but mine is already SVY21"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#checking-content-of-a-simple-feature-data-frame",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#checking-content-of-a-simple-feature-data-frame",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "3 Checking Content of A Simple Feature Data Frame",
    "text": "3 Checking Content of A Simple Feature Data Frame\n\n3.1 Working with st_geometry()\nst_geometry() displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\n\n\n\n3.2 Working with glimpse()\nglimpse() provides more information about the associated attribute information in the data frame. It reveals the data type of each fields.\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\n3.3 Working with head()\nhead() is the Base R function to reveal complete information of a feature object.\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30..."
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#plotting-the-geospatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "4 Plotting the Geospatial Data",
    "text": "4 Plotting the Geospatial Data\nplot() of R Graphic is used to visualise geospatial features.\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\nplot(st_geometry(mpsz))\n\n\n\n\nWe can also choose to plot the sf object by using a specific attribute as shown in the code chunk below.\n\nplot(mpsz[\"PLN_AREA_N\"])"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#working-with-projection",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "5 Working with Projection",
    "text": "5 Working with Projection\nWe need to ensure that geospatial data are projected using similar coordinate system, and this is where map projection comes in.\nThe technical term of the process to project a simple feature data frame from one coordinate system to another is called projection transformation.\n\n5.1 Assigning EPSG code to a simple feature data frame\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nThe following example shows that although mpsz is projected in svy21 (whose EPSG = 3414), the end of the print indicates that the EPSG is 9001, which is wrong.\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nst_set_crs() is used to assign the correct EPSG code.\n\nmpsz3414 <- st_set_crs(mpsz,3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n5.2 Transforming projection of preschool from wgs84 to svy21\nIf we need to reproject a feature data frame from one geographic coordinate system to another, we need to use st_transform().\n\npreschool3414 <- st_transform(preschool, crs = 3414)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-aspatial-data",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#importing-and-converting-aspatial-data",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "6 Importing and Converting Aspatial Data",
    "text": "6 Importing and Converting Aspatial Data\nAspatial data is not a geospatial data, but contains two fields that capture the x- and y- coordinates of the data points.\n\n6.1 Importing and inspecting aspatial data\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4252 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (5): name, host_name, neighbourhood_group, neighbourhood, room_type\ndbl  (10): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlist(listings) \n\n[[1]]\n# A tibble: 4,252 × 16\n       id name     host_id host_…¹ neigh…² neigh…³ latit…⁴ longi…⁵ room_…⁶ price\n    <dbl> <chr>      <dbl> <chr>   <chr>   <chr>     <dbl>   <dbl> <chr>   <dbl>\n 1  50646 Pleasan…  227796 Sujatha Centra… Bukit …    1.33    104. Privat…    80\n 2  71609 Ensuite…  367042 Belinda East R… Tampin…    1.35    104. Privat…   178\n 3  71896 B&B  Ro…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 4  71903 Room 2-…  367042 Belinda East R… Tampin…    1.35    104. Privat…    81\n 5 275343 Conveni… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    52\n 6 275344 15 mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    40\n 7 294281 5 mins … 1521514 Elizab… Centra… Newton     1.31    104. Privat…    72\n 8 301247 Nice ro… 1552002 Rahul   Centra… Geylang    1.32    104. Privat…    41\n 9 324945 20 Mins… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n10 330089 Accomo@… 1439258 Joyce   Centra… Bukit …    1.29    104. Privat…    49\n# … with 4,242 more rows, 6 more variables: minimum_nights <dbl>,\n#   number_of_reviews <dbl>, last_review <date>, reviews_per_month <dbl>,\n#   calculated_host_listings_count <dbl>, availability_365 <dbl>, and\n#   abbreviated variable names ¹​host_name, ²​neighbourhood_group,\n#   ³​neighbourhood, ⁴​latitude, ⁵​longitude, ⁶​room_type\n\n\n\n\n6.2 Creating a simple feature data frame from aspatial data frame\nst_as_sf() converts data frame to simple feature data frame.\n\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n\nNote that coords argument requires the column name of the x-coordinates followed by y-coordinates.\nNote that crs argument requires the coordinates system in EPSG format.\nNote that %>% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\nBy inspecting listings_sf below, note that a new column geometry has been added, while longitude and latitude have been dropped.\n\nglimpse(listings_sf)\n\nRows: 4,252\nColumns: 15\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275343, 275…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <dbl> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <dbl> 80, 178, 81, 81, 52, 40, 72, 41, 49, 49…\n$ minimum_nights                 <dbl> 90, 90, 90, 90, 14, 14, 90, 8, 14, 14, …\n$ number_of_reviews              <dbl> 18, 20, 24, 48, 20, 13, 133, 105, 14, 1…\n$ last_review                    <date> 2014-07-08, 2019-12-28, 2014-12-10, 20…\n$ reviews_per_month              <dbl> 0.22, 0.28, 0.33, 0.67, 0.20, 0.16, 1.2…\n$ calculated_host_listings_count <dbl> 1, 4, 4, 4, 50, 50, 7, 1, 50, 50, 50, 4…\n$ availability_365               <dbl> 365, 365, 365, 365, 353, 364, 365, 90, …\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#geoprocessing-with-sf-package",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "7 Geoprocessing with sf package",
    "text": "7 Geoprocessing with sf package\n\n7.1 Buffering\nScenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nSolution:\nFirstly, use st_buffer() to compute the 5-meter buffers around cycling paths.\n\nbuffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs = 30)\n\nNext, calculate the area of the buffers:\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nLastly, use sum() to derive the total land involved.\n\nsum(buffer_cycling$AREA)\n\n773143.9 [m^2]\n\n\n\n\n7.2 Point-in-polygon count\nScenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nSolution:\nFirst, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, use length() to calculate the number of pre-schools that fall inside each planning subzone.\nThe following code chunk performs both operations at one go:\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\nCheck summary statistics:\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  0.000   0.000   2.000   4.207   6.000  37.000 \n\n\nList planning subzone with the most number of pre-school:\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 23449.05 ymin: 46001.23 xmax: 25594.22 ymax: 47996.47\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      290          3 WOODLANDS EAST    WDSZ03      N  WOODLANDS         WD\n      REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 NORTH REGION       NR C90769E43EE6B0F2 2014-12-05 24506.64 46991.63\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1   6603.608    2553464 MULTIPOLYGON (((24786.75 46...           37\n\n\n++ Calculate the density of pre-school by planning subzone\nSolution:\nFirstly, use st_area() to derive the area of each planning subzone.\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nNext, use mutate() to compute density:\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\nList planning subzone with the highest density:\n\ntop_n(mpsz3414, 1, `PreSch Density`)\n\nSimple feature collection with 1 feature and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 28896.26 ymin: 28339.16 xmax: 29426.66 ymax: 28685.25\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO SUBZONE_N SUBZONE_C CA_IND    PLN_AREA_N PLN_AREA_C\n1       22         10     ANSON    DTSZ10      Y DOWNTOWN CORE         DT\n        REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR\n1 CENTRAL REGION       CR 4893F02202845C1D 2014-12-05 29145.35 28466.78\n  SHAPE_Leng SHAPE_Area                       geometry PreSch Count\n1     1586.1   103238.5 MULTIPOLYGON (((29201.07 28...            3\n            Area   PreSch Density\n1 103238.5 [m^2] 29.05893 [1/m^2]"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#exploratory-data-analysis-eda",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "8 Exploratory Data Analysis (EDA)",
    "text": "8 Exploratory Data Analysis (EDA)\nHistogram to reveal the distribution of PreSch Density using hist() of R Graphics:\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\nUsing ggplot2 functions for better visualisations:\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\nUsing ggplot2 method to plot a scatterplot showing relationship between Pre-school Density and Pre-school Count:\n\nggplot(mpsz3414, aes(x=as.numeric(`PreSch Density`), y=as.numeric(`PreSch Count`))) + \n    geom_point()"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#getting-started-1",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#getting-started-1",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "1 Getting Started",
    "text": "1 Getting Started\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data-1",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#importing-geospatial-data-1",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "2 Importing Geospatial Data",
    "text": "2 Importing Geospatial Data\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\zong-you-1\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n2.1 Importing Attribute Data\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n2.2 Data Preparation\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\nData Wrangling\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\n\n\nJoining attribute data and geospatial data\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nWarning: `funs()` was deprecated in dplyr 0.8.0.\nℹ Please use a list of either functions or lambdas:\n\n# Simple named list: list(mean = mean, median = median)\n\n# Auto named with `tibble::lst()`: tibble::lst(mean, median)\n\n# Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE))\n\n\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nNote: left_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex1/Hands-on_Ex1.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex1/Hands-on_Ex1.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on Exercise 1: Geospatial Data Wrangling with R",
    "section": "3 Choropleth Mapping Geospatial Data Using tmap",
    "text": "3 Choropleth Mapping Geospatial Data Using tmap\n\n3.1 Plot using qtm()\nThis is the easiest and quickest way to draw a choropleth map.\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\nPlot using tmap’s elements\nThis way of plotting allow us to draw a high quality cartographic choropleth map, which allows aesthetics of individual layers to be controlled. tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n3.2 Data classification methods of tmap\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks."
  },
  {
    "objectID": "Hands-on_Ex1.html",
    "href": "Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "This is the overview paragraph."
  },
  {
    "objectID": "Hands-on_Ex1.html#getting-started",
    "href": "Hands-on_Ex1.html#getting-started",
    "title": "Hands-on Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nThis is the getting started paragraph."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "This hands-on exercise is on global and local measures of spatial autocorrelation.\n\n\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#getting-ready",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#getting-ready",
    "title": "Hands-on Exercise 2",
    "section": "2 Getting Ready",
    "text": "2 Getting Ready\n\n2.1 Load the required packages:\n\npacman::p_load(sf, spdep, tmap, tidyverse)\n\n\n\n2.2 Import shapefile\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\zong-you-1\\ISSS624\\Hands-on_Ex2\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n2.3 Import csv file\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n2.4 Perform relational join and visualisation\n\nhunan <- left_join(hunan,hunan2012)\n\nJoining, by = \"County\"\n\n\nPrepare a basemap and choropleth map showing the distribution of GDPPC 2012:\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#global-spatial-autocorrelation",
    "title": "Hands-on Exercise 2",
    "section": "3 Global Spatial Autocorrelation",
    "text": "3 Global Spatial Autocorrelation\n\n3.1 Compute Contiguity Spatial Weights\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\n\n\n3.2 Row-standardised weights matrix\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\n\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n3.3 Global Spatial Autocorrelation: Moran’s I\nWe will use moran.test() of spdep to perform Moran’s I statistics testing.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nSince p<0.05, we reject null hypothesis at 5% significance level. Since Moran I statistic is positive (>0), this means that observations tend to be similar i.e. clustered.\n\nComputing Monte Carlo Moran’s I\nWe use moran.mc() of spdep to perform permutation test for Moran’s I statistic (1000 simulations).\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nSince p<0.05, we reject null hypothesis at 5% significance level. Since Moran I statistic is positive (>0), this means that observations tend to be similar i.e. clustered.\n\n\nVisualising Monte Carlo Moran’s I\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n3.4 Global Spatial Autocorrelation: Geary’s C\nWe will use geary.test() of spdep to perform Geary’s C test for spatial autocorrelation.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\nSince p<0.05, we reject null hypothesis at 5% significance level. Since Geary C statistic is small (<1), this means that observations tend to be similar i.e. clustered.\n\nComputing Monte Carlo Geary’s C\nWe use geary.mc() of spdep to perform permutation test for Geary’s C statistic (1000 simulations).\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nSince p<0.05, we reject null hypothesis at 5% significance level. Since Geary C statistic is small (<1), this means that observations tend to be similar i.e. clustered.\n\n\nVisualising Monte Carlo Geary’s C\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#spatial-correlogram",
    "title": "Hands-on Exercise 2",
    "section": "4 Spatial Correlogram",
    "text": "4 Spatial Correlogram\n\n4.1 Compute Moran’s I correlogram\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n4.2 Compute Geary’s C correlogram and plot\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr) \n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#cluster-and-outlier-analysis",
    "title": "Hands-on Exercise 2",
    "section": "5 Cluster and Outlier Analysis",
    "text": "5 Cluster and Outlier Analysis\n\n5.1 Computing local Moran’s I\nWe will use localmoran() of spdep to compute local Moran’s I.\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\n\nprintCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\nMapping local Moran’s I Values\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nMapping local Moran’s I p-values\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\nFrom the graph on the left, the orange region represents outlier while the green regions are clusters.\nHowever, for the outlier region, as there are only 3 neighbours, it is not statistically significant as shown by the p-value on the right."
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#creating-a-lisa-cluster-map",
    "title": "Hands-on Exercise 2",
    "section": "6 Creating a LISA Cluster Map",
    "text": "6 Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n6.1 Plot Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nThe plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\n6.2 Plot Moran scatterplot with standardised variable\nWe use scale() to center and scale the variable (i.e. standardisation - subtract mean and divide by standard deviation).\nThe as.vector() ensures that the resulting data type is a vector, that map neatly into our dataframe.\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector \n\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n6.3 Preparing LISA map classes\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I <- localMI[,1] - mean(localMI[,1])     \nsignif <- 0.05    \n\nDefine the high-high, low-low, low-high, and high-low categories:\n\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4    \n\nPlace non-significant Moran in category 0.\n\nquadrant[localMI[,5]>signif] <- 0\n\n\n\n6.4 Plotting LISA map\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on_Ex2/Hands-on_Ex2.html#hot-spot-and-cold-spot-area-analysis",
    "title": "Hands-on Exercise 2",
    "section": "7 Hot Spot and Cold Spot Area Analysis",
    "text": "7 Hot Spot and Cold Spot Area Analysis\n\n7.1 Getis and Ord’s G-Statistics\nThe Getis and Ord’s G-Statistics looks at neighbours within a defined proximity to identify where either high or low values clutser spatially.\nHere, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n\n7.2 Deriving distance-based weight matrix\n\nDeriving the centroid\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n\n\n\nDetermining the cut-off distance\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\n7.3 Computing adaptive distance weight matrix\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\n7.4 Computing Gi statistics\n\nGi statistics using fixed distance\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nThe code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\nMapping Gi values with fixed distance weights\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\nGi statistics using adaptive distance\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "p_load function of pacman package is used to install and load sf and tidyverse packages into R environment.\n\npacman::p_load(sf, tidyverse)\n\n\n\n\n\n\nst_read() function of sf package imports ESRI shapefile into R as a polygon feature data frame.\nsf stands for Simple Features.\nNote that dsn defines the data path, and layer is the shapefile name.\nNote that no extension such as .shp, .dbf, .prj and .shx are needed.\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\zong-you-1\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n\nUsing piping %>% to perform two actions at one go.\n\npreschool <- st_read(\"data/geospatial/pre-schools-location-kml.kml\") %>%\n  st_transform(crs=3414)\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\zong-you-1\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1359 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nst_geometry(preschool)\n\nGeometry set for 1359 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25667.6 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (19997.26 32333.17 0)\n\n\nPOINT Z (19126.75 33114.35 0)\n\n\nPOINT Z (20345.12 31934.56 0)\n\n\nPOINT Z (20400.31 31952.36 0)\n\n\nPOINT Z (19810.78 33140.31 0)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html#getting-the-data",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html#getting-the-data",
    "title": "In-class Exercise 1",
    "section": "1 Getting the data",
    "text": "1 Getting the data\n\nhunan_sf <- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\zong-you-1\\ISSS624\\In-class_Ex\\In-class_Ex1\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n1.1 Importing attribute data in csv\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n1.2 Perform partial join\n\nhunan <- left_join(hunan_sf,hunan2012)\n\nJoining, by = \"County\""
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html#visualising-regional-development-indicator",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html#visualising-regional-development-indicator",
    "title": "In-class Exercise 1",
    "section": "2 Visualising Regional Development Indicator",
    "text": "2 Visualising Regional Development Indicator\nUsing qtm() of tmap package, we can plot a basemap and a choropleth map.\n\nbasemap <- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc <- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html#computing-contiguity-spatial-weights-using-poly2nb",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html#computing-contiguity-spatial-weights-using-poly2nb",
    "title": "In-class Exercise 1",
    "section": "3 Computing Contiguity Spatial Weights using poly2nb()",
    "text": "3 Computing Contiguity Spatial Weights using poly2nb()\nWe use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.\nNote that the default is queen = TRUE.\n\n3.1 Computing (QUEEN) contiguity based neighbours\n\nwm_q <- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one heighbours.\nWe can find the neighbouring polygons for the first polygon in the object using the following code chunk:\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nTo retrieve county name, use the following code chunk:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nTo reveal the county names of the five neighbouring polygons of Anxiang:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n# nb1 <- wm_q[[1]]\n# hunan$NAME_3[nb1]\n\nTo retrieve GDPPC of these five countries:\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nTo display the complete weight matrix:\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\n3.2 Computing (ROOK) contiguity based neighbours\n\nwm_r <- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\n3.3 Visualising contiguity weights\nCompute longitude and latitude, and combine to form the coordinates.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords <- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\n3.4 Plot Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n3.5 Plot Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n3.6 Plot both Queen and Rook contiguity based neighbours map\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\", main=\"Queen Contiguity\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\", main=\"Rook Contiguity\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html#computing-distance-based-neighbours-using-dnearneigh",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html#computing-distance-based-neighbours-using-dnearneigh",
    "title": "In-class Exercise 1",
    "section": "4 Computing distance-based neighbours using dnearneigh()",
    "text": "4 Computing distance-based neighbours using dnearneigh()\nWe use dnearneigh() of spdep package to derive distance-based weight matrices.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n4.1 Determine cutoff distance\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n4.2 Compute fixed distance weight matrix\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nTo display the content of wm_d62 weight matrix:\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display weight matrix:\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\nn_comp <- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\n\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\n\n4.3 Plot fixed distance weight matrix\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08, main=\"1st nearest neighbours\")\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main=\"Distance link\")\n\n\n\n\n\n\n4.4 Compute adaptive distance weight matrix\n\nknn6 <- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nTo display content of the matrix:\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n\n4.5 Plot distance-based neighbours\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n4.6 Weights based on IDW - derive spatial weight matrix based on Inverse Distance method\nWe will compute distances between areas using nbdists() of spdep.\n\ndist <- nbdists(wm_q, coords, longlat = TRUE)\nids <- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\n4.7 Row-standardised weights matrix\n\nrswm_q <- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nTo see the weight of the first polygon’s four neighbors type:\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\n\n\n\n4.8 Row-standardised distance weight matrix\n\nrswm_ids <- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\nrswm_ids$weights[1]\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_ex1.html#application-of-spatial-weight-matrix",
    "href": "In-class_Ex/In-class_Ex1/In-class_ex1.html#application-of-spatial-weight-matrix",
    "title": "In-class Exercise 1",
    "section": "5 Application of Spatial Weight Matrix",
    "text": "5 Application of Spatial Weight Matrix\n\n5.1 Spatial lag with row-standarized weights\nCompute average neighbour GDPPC value for each polygon. These values are often referred as spatially lagged values.\n\nGDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nTo retrieve the GDPPC of the 5 counties near Anxiang county (same as previous section):\n\nnb1 <- wm_q[[1]]\nnb1 <- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nAppend spatially lag GDPPC values onto Hunan sf data frame:\n\nlag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res <- as.data.frame(lag.list)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag GDPPC\")\nhunan <- left_join(hunan,lag.res)\n\nJoining, by = \"NAME_3\"\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\nhead(hunan)\n\nSimple feature collection with 6 features and 36 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3 Shape_Leng Shape_Area  County    City\n1 Changde 21098 Anxiang      County   1.869074 0.10056190 Anxiang Changde\n2 Changde 21100 Hanshou      County   2.360691 0.19978745 Hanshou Changde\n3 Changde 21101  Jinshi County City   1.425620 0.05302413  Jinshi Changde\n4 Changde 21102      Li      County   3.474325 0.18908121      Li Changde\n5 Changde 21103   Linli      County   2.289506 0.11450357   Linli Changde\n6 Changde 21104  Shimen      County   4.171918 0.37194707  Shimen Changde\n  avg_wage deposite     FAI Gov_Rev Gov_Exp     GDP GDPPC     GIO   Loan  NIPCR\n1    31935   5517.2  3541.0  243.64  1779.5 12482.0 23667  5108.9 2806.9 7693.7\n2    32265   7979.0  8665.0  386.13  2062.4 15788.0 20981 13491.0 4550.0 8269.9\n3    28692   4581.7  4777.0  373.31  1148.4  8706.9 34592 10935.0 2242.0 8169.9\n4    32541  13487.0 16066.0  709.61  2459.5 20322.0 24473 18402.0 6748.0 8377.0\n5    32667    564.1  7781.2  336.86  1538.7 10355.0 25554  8214.0  358.0 8143.1\n6    33261   8334.4 10531.0  548.33  2178.8 16293.0 27137 17795.0 6026.5 6156.0\n   Bed    Emp  EmpR EmpRT Pri_Stu Sec_Stu Household Household_R NOIP Pop_R\n1 1931 336.39 270.5 205.9  19.584  17.819     148.1       135.4   53 346.0\n2 2560 456.78 388.8 246.7  42.097  33.029     240.2       208.7   95 553.2\n3  848 122.78  82.1  61.7   8.723   7.592      81.9        43.7   77  92.4\n4 2038 513.44 426.8 227.1  38.975  33.938     268.5       256.0   96 539.7\n5 1440 307.36 272.2 100.8  23.286  18.943     129.1       157.2   99 246.6\n6 2502 392.05 329.6 193.8  29.245  26.104     190.6       184.7  122 399.2\n    RSCG Pop_T    Agri Service Disp_Inc      RORP    ROREmp lag GDPPC\n1 3957.9 528.3 4524.41   14100    16610 0.6549309 0.8041262  24847.20\n2 4460.5 804.6 6545.35   17727    18925 0.6875466 0.8511756  22724.80\n3 3683.0 251.8 2562.46    7525    19498 0.3669579 0.6686757  24143.25\n4 7110.2 832.5 7562.34   53160    18985 0.6482883 0.8312558  27737.50\n5 3604.9 409.3 3583.91    7031    18604 0.6024921 0.8856065  27270.25\n6 6490.7 600.5 5266.51    6981    19275 0.6647794 0.8407091  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nPlot both GDPPC and spatial lag GDPPC for comparison:\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_gdppc <- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n5.2 Spatial lag as a sum of neighbouring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\nb_weights <- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 <- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nCompute a lag variable from our weight and GDPPC:\n\nlag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res <- as.data.frame(lag_sum)\ncolnames(lag.res) <- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\n\nhunan <- left_join(hunan, lag.res)\n\nJoining, by = \"NAME_3\"\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc <- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n5.3 Spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\nwm_q1 <- wm_q\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nThen we obtain weights with nb2listw():\n\nwm_q1 <- nb2listw(wm_q1)\nwm_q1\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nLastly, create the lag variable from our weight structure and GDPPC variable:\n\nlag_w_avg_gpdpc <- lag.listw(wm_q1, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nConvert lag variable listw object into a data.frame by using as.data.frame():\n\nlag.list.wm_q1 <- list(hunan$NAME_3, lag.listw(wm_q1, hunan$GDPPC))\nlag_wm_q1.res <- as.data.frame(lag.list.wm_q1)\ncolnames(lag_wm_q1.res) <- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\nhunan <- left_join(hunan, lag_wm_q1.res)\n\nJoining, by = \"NAME_3\"\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_avg_gdppc <- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n5.4 Spatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights. To do this we assign binary weights to the neighbor structure that includes the diagonal element.\n\nwm_q1 <- wm_q\ninclude.self(wm_q1)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\n\nwm_q1\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\n\nb_weights <- lapply(wm_q1, function(x) 0*x + 1)\nb_weights[1]\n\n[[1]]\n[1] 1 1 1 1 1\n\n\n\nb_weights2 <- nb2listw(wm_q1, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\n\nw_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\n\nw_sum_gdppc.res <- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) <- c(\"NAME_3\", \"w_sum GDPPC\")\n\n\nhunan <- left_join(hunan, w_sum_gdppc.res)\n\nJoining, by = \"NAME_3\"\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\nw_sum_gdppc <- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(gdppc, w_sum_gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_ex2.html",
    "href": "In-class_Ex/In-class_Ex2/In-class_ex2.html",
    "title": "In-class Exercise 2",
    "section": "",
    "text": "p_load function of pacman package is used to install and load the required packages into R environment.\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_ex2.html#importing-geospatial-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_ex2.html#importing-geospatial-data",
    "title": "In-class Exercise 2",
    "section": "2. Importing Geospatial Data",
    "text": "2. Importing Geospatial Data\n\n2.1 Importing water point geospatial data\nNote that CRS = 4326 is used here, instead of Nigeria’s 26391, 26392, and 26303.\n4326 is for WGS84, which is the coordinate system for the original data.\nst_transform() is not used here as there will be issues faced, and we will convert the coordinates later after data wrangling.\n\nwp <- st_read(dsn = \"data/waterdata\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nTo create a sub-set data, so that we do not need to keep calling the full file.\n\nwp_nga <- write_rds(wp, \"data/wp_nga.rds\")\n\n\n\n2.2 Importing Nigeria Level-2 Administrative Boundary\n\nnga_LGA <- st_read(dsn = \"data/geoBoundaries-NGA-ADM2-all\",\n                   layer = \"geoBoundaries-NGA-ADM2\",\n                   crs = 4326)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_ex2.html#data-wrangling",
    "href": "In-class_Ex/In-class_Ex2/In-class_ex2.html#data-wrangling",
    "title": "In-class Exercise 2",
    "section": "3 Data Wrangling",
    "text": "3 Data Wrangling\nFrom the graph below, there are more than 10,000 records with status_cle = NA.\n\nfreq(data = wp_nga,\n     input = \"status_cle\")\n\nWe will fix that by converting the N/A values to “Unknown”.\n\nwp_nga <- read_rds(\"data/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\nPlot the frequency graph again to check that there are no more N/A values.\n\nfreq(data = wp_nga,\n     input = \"status_cle\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_ex2.html#extracting-water-point-data",
    "href": "In-class_Ex/In-class_Ex2/In-class_ex2.html#extracting-water-point-data",
    "title": "In-class Exercise 2",
    "section": "4 Extracting Water Point Data",
    "text": "4 Extracting Water Point Data\n\n4.1 Extracting functional water point\n\nwpt_functional <- (wp_nga %>%\n                     filter(status_cle %in%\n                              c(\"Functional\",\n                                \"Functional but not in use\",\n                                \"Functional but needs repair\")\n                            )\n                   )\n\n\n\n4.2 Extracting non-functional water point\n\nwpt_nonfunctional <- (wp_nga %>%\n                     filter(status_cle %in%\n                              c(\"Abandoned\",\n                                \"Abandoned/Decommissioned\",\n                                \"Non functional due to dry season\",\n                                \"Non-Functional due to dry season\",\n                                \"Non-Functional\")\n                            )\n                   )\n\n\n\n4.3 Extracting water point with Unknown class\n\nwpt_unknown <- (wp_nga %>%\n                     filter(status_cle == \"Unknown\")\n                )"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_ex2.html#performing-point-in-polygon-count",
    "href": "In-class_Ex/In-class_Ex2/In-class_ex2.html#performing-point-in-polygon-count",
    "title": "In-class Exercise 2",
    "section": "5 Performing Point-in-Polygon Count",
    "text": "5 Performing Point-in-Polygon Count\n\nnga_wp <- nga_LGA %>% \n  mutate(`total wpt` = lengths(st_intersects(nga_LGA, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(st_intersects(nga_LGA, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(st_intersects(nga_LGA, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(st_intersects(nga_LGA, wpt_unknown)))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_ex2.html#saving-the-analytical-data-table",
    "href": "In-class_Ex/In-class_Ex2/In-class_ex2.html#saving-the-analytical-data-table",
    "title": "In-class Exercise 2",
    "section": "6 Saving the Analytical Data Table",
    "text": "6 Saving the Analytical Data Table\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`)\n\n\nwrite_rds(nga_wp, \"data/nga_wp.rds\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex2/In-class_ex2.html#visualising-the-spatial-distribution-of-water-points",
    "href": "In-class_Ex/In-class_Ex2/In-class_ex2.html#visualising-the-spatial-distribution-of-water-points",
    "title": "In-class Exercise 2",
    "section": "7 Visualising the spatial distribution of water points",
    "text": "7 Visualising the spatial distribution of water points\n\nnga_wp <- read_rds(\"data/nga_wp.rds\")\ntotal <- qtm(nga_wp, \"total wpt\")\nwp_functional <- qtm(nga_wp, \"wpt functional\")\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")\nunknown <- qtm(nga_wp, \"wpt unknown\")\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS624",
    "section": "",
    "text": "This is for the submission of work for ISSS624 Applied Geospatial Analytics, as well as the documentation of my own notes for future reference."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Water is an important resource and access to clean water is critical to human health. However, over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security - Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\n\n\n\nThrough the use of appropriate global and local measures of spatial association techniques, we aim to reveal spatial patterns of non-functional water points in Nigeria."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#import-packages-and-data-sets",
    "href": "Take-home_Ex1/Take-home_Ex1.html#import-packages-and-data-sets",
    "title": "Take Home Exercise 1",
    "section": "2 Import Packages and Data Sets",
    "text": "2 Import Packages and Data Sets\n\n2.1 Packages\np_load function of pacman package is used to install and load the required packages into R environment.\nThe following packages are used:\n\nsf: Support for simple features, a standardised way to encode spatial vector data. Used for reading and writing data, and for projection conversions and datum transformations.\ntidyverse: Collection of packages that are commonly used for data analysis e.g. ggplot2, dplyr, tidyr.\ntmap: Used for drawing of thematic maps.\nspdep: Collection of functions to create spatial weights matrix objects for spatial data analysis, and a collection of tests for spatial ‘autocorrelation’ such as Moran’s I and Geary’s C.\nfunModeling: Used for quick exploratory data analysis\n\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)\n\n\n\n2.2 Data sets\nTwo data sets are used:\n\nWPdx+ data set from WPdx Global Data Repositories which provides data on functional and non-functional water points in Nigeria\nNigeria Level-2 Administrative Boundary (also known as Local Government Area) polygon features GIS data from geoBoundaries.\n\n\nImporting WPdx+ data set\nst_read() function of pacman package is used to import geo_export shapefile into R environment, and save the imported geospatial data into simple feature data table. Note that filter() of dpylr package is also used to extract water point records of Nigeria.\n\nNote 1: The original data will be transformed and eventually saved as a smaller file.\nNote 2: Avoid performing transformation e.g. st_transform()as we will be using st_intersect() of sf package in the later stage of the geoprocessing, and this function only works correctly if the geospatial data is in geographic coordinate system i.e. WGS84.\n\n\nwp <- st_read(dsn = \"geodata\",\n              layer = \"geo_export\",\n              crs = 4326) %>%\n  filter(clean_coun == \"Nigeria\")\n\nNext, write_rds() of readr package is used to save the extracted sf data table (i.e. wp) into an output file in rds data format. The output file is called wp_nga.rds and it is saved in geodata sub-folder.\n\nwp_nga <- write_rds(wp, \"geodata/wp_nga.rds\")\n\n\n\nImporting Nigeria’s level-2 administrative boundary\nst_read() of sf package is used to import geoBoundaries-NGA-ADM2 shapefile into R environment and save the imported geospatial data into simple feature data table.\n\nnga_LGA <- st_read(dsn = \"geodata\",\n                   layer = \"geoBoundaries-NGA-ADM2\",\n                   crs = 4326)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "href": "Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "title": "Take Home Exercise 1",
    "section": "3 Data Wrangling",
    "text": "3 Data Wrangling\n\n3.1 Exploratory data analysis\nfreq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data = wp_nga,\n     input = \"status_cle\")\n\n\n\n\n\n\nFrom the above graph, we can see that there are more than 10,000 records with N/A value for status_cle.\nreplace_na of tidyr package and mutate of dplyr package are used to replace the missing values to “Unknown”.\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\") %>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))\n\nPlot the frequency graph again to check that there are no more N/A values.\n\nfreq(data = wp_nga,\n     input = \"status_cle\")\n\n\n\n\n\n\n\n\n3.2 Extracting water point data\nIn the code chunks below, filter() of dplyr package is used to select functional and non-functional water points, and water points with Unknown class.\n\nExtracting functional water point\n\nwpt_functional <- (wp_nga %>%\n                     filter(status_cle %in%\n                              c(\"Functional\",\n                                \"Functional but not in use\",\n                                \"Functional but needs repair\")\n                            )\n                   )\n\n\n\nExtracting non-functional water point\n\nwpt_nonfunctional <- (wp_nga %>%\n                     filter(status_cle %in%\n                              c(\"Abandoned\",\n                                \"Abandoned/Decommissioned\",\n                                \"Non functional due to dry season\",\n                                \"Non-Functional due to dry season\",\n                                \"Non-Functional\")\n                            )\n                   )\n\n\n\nExtracting water point with Unknown class\n\nwpt_unknown <- (wp_nga %>%\n                     filter(status_cle == \"Unknown\")\n                )\n\n\n\n\n3.3 Performing point-in-polygon count\nst_intersects() of sf package is used to identify the water points located inside each LGA level, and lengths() of Base R is used to calculate the number of water points inside each LGA level.\n\nnga_wp <- nga_LGA %>% \n  mutate(`total wpt` = lengths(st_intersects(nga_LGA, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(st_intersects(nga_LGA, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(st_intersects(nga_LGA, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(st_intersects(nga_LGA, wpt_unknown)))\n\n\n\n3.4 Computing percentage of functional and non-functional water point at LGA level\nmutate() of dplyr package is used to compute the proportion of functional and non-functional water at LGA level.\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(pct_nonfunctional = `wpt non-functional`/`total wpt`)\n\nnga_wp$pct_functional[is.nan(nga_wp$pct_functional)]<- 0\nnga_wp$pct_nonfunctional[is.nan(nga_wp$pct_nonfunctional)]<- 0\n\n\n\n3.5 Transforming the projected coordinate system\nst_transform() of sf package is used to transform the to one of Nigeria’s Projected Coordinate Systems (EPSG: 26391, 26392, and 26303).\n\nnga_wp <- st_transform(nga_wp, \n                       crs = 26392)\n\n\n\n3.6 Saving the Analytical Data Table\nLastly, write_rds() of readr package is used again to save the nga_wp to nga_wp.rds, which is saved in geodata sub-folder.\n\nwrite_rds(nga_wp, \"geodata/nga_wp.rds\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#import-cleaned-data",
    "href": "Take-home_Ex1/Take-home_Ex1.html#import-cleaned-data",
    "title": "Take Home Exercise 1",
    "section": "4 Import Cleaned Data",
    "text": "4 Import Cleaned Data\nread_rds() of readr package is used to read the saved nga_wp.rds in the geodata sub-folder.\n\nnga_wp <- read_rds(\"geodata/nga_wp.rds\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#visualise-spatial-distribution-of-water-points",
    "href": "Take-home_Ex1/Take-home_Ex1.html#visualise-spatial-distribution-of-water-points",
    "title": "Take Home Exercise 1",
    "section": "5 Visualise Spatial Distribution of Water Points",
    "text": "5 Visualise Spatial Distribution of Water Points\nqtm() of tmap package is used visualise the spatial distribution of water points by LGA level by using appropriate thematic mapping technique.\n\n5.1 Visualising spatial distribution of water points count by LGA level\n\ntotal <- qtm(nga_wp, \"total wpt\")+\n  tm_layout(main.title = \"Total water points\", \n            main.title.size = 1, \n            legend.width=0.2)\nwp_functional <- qtm(nga_wp, \"wpt functional\")+\n  tm_layout(main.title = \"Functional water points\", \n            main.title.size = 1, \n            legend.width=0.2)\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")+\n  tm_layout(main.title = \"Non-functional water points\", \n            main.title.size = 1, \n            legend.width=0.2)\nunknown <- qtm(nga_wp, \"wpt unknown\")+\n  tm_layout(main.title = \"Unknown water points\", \n            main.title.size = 1, \n            legend.width=0.2)\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, ncol=2)\n\n\n\n\n\nThe trends are not obvious when we plot the spatial distribution of water point count. Instead, let’s plot the spatial distribution of the water point rate below.\n\n\n\n5.2 Visualising spatial distribution of water point rate by LGA level\n\npct_wp_functional <- qtm(nga_wp, \"pct_functional\")+\n  tm_layout(main.title = \"Percentage of functional water points\", \n            main.title.size = 1)+\n  tm_text(\"shapeName\",\n          remove.overlap = TRUE,\n          size = 0.6)\npct_wp_nonfunctional <- qtm(nga_wp, \"pct_nonfunctional\")+\n  tm_layout(main.title = \"Percentage of non-functional water points\", \n            main.title.size = 1)+\n  tm_text(\"shapeName\",\n          remove.overlap = TRUE,\n          size = 0.6)\n\ntmap_arrange(pct_wp_functional, pct_wp_nonfunctional, asp=1, ncol=2)\n\n\n\n\n\nFrom the above plots, we can observe that the northern region of Nigeria generally has a higher proportion of functional water points (darker shade of red on the left graph), while the southern region has a relatively higher proportion of non-functional water points (slightly darker shade of red on the right graph)."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "href": "Take-home_Ex1/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "title": "Take Home Exercise 1",
    "section": "6 Cluster and Outlier Analysis",
    "text": "6 Cluster and Outlier Analysis\n\n6.1 Computing contiguity spatial weights\npoly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.\nIn the code chunk below, we find the Queen contiguity weight matrix as we set the “queen” argument as TRUE, which will return a list of first order neighbours using the Queen criteria.\n\nwm_q <- poly2nb(nga_wp, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\n\n\n6.2 Computing row-standardised weights matrix\nNext, we assign equal weights to each neighboring polygon (style=“W”) in nb2listw().\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nprint(rswm_q, zero.policy = TRUE)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 285.0658 3198.414\n\n\n\n\n6.3 Local Moran’s I\nlocalmoran() function of spdep package is used to compute local Moran’s I. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nWe use the pct_nonfunctional to compute local Moran’s I.\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\n\n\nfips <- order(nga_wp$shapeName)\nlocalMI <- localmoran(nga_wp$pct_nonfunctional, rswm_q, zero.policy = TRUE)\nhead(localMI)\n\n         Ii          E.Ii    Var.Ii      Z.Ii Pr(z != E(Ii))\n1 0.7104808 -0.0008481017 0.1633313 1.7600935    0.078391961\n2 0.4787122 -0.0005236472 0.1346804 1.3058614    0.191599708\n3 2.9220515 -0.0037801442 0.9690735 2.9721518    0.002957204\n4 0.2666687 -0.0016485516 0.1805678 0.6314347    0.527756347\n5 1.1001242 -0.0007647464 0.1176793 3.2091756    0.001331162\n6 0.5273909 -0.0009383859 0.1028556 1.6473678    0.099482464\n\n\nprintCoefmat() is used to list the content of the local Moran matrix in the code chunk below.\n\nnga_wp$shapeName <- with(nga_wp, make.unique(as.character(shapeName)))\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=nga_wp$shapeName[fips]),\n  check.names=FALSE)\n\n                            Ii        E.Ii      Var.Ii        Z.Ii\nAba North           7.1048e-01 -8.4810e-04  1.6333e-01  1.7601e+00\nAba South           4.7871e-01 -5.2365e-04  1.3468e-01  1.3059e+00\nAbadam              2.9221e+00 -3.7801e-03  9.6907e-01  2.9722e+00\nAbaji               2.6667e-01 -1.6486e-03  1.8057e-01  6.3143e-01\nAbak                1.1001e+00 -7.6475e-04  1.1768e-01  3.2092e+00\nAbakaliki           5.2739e-01 -9.3839e-04  1.0286e-01  1.6474e+00\nAbeokuta North     -2.0155e-01 -1.9660e-04  2.5192e-02 -1.2686e+00\nAbeokuta South      1.2084e-01 -1.9665e-04  3.7896e-02  6.2178e-01\nAbi                -4.0565e-02 -6.9312e-05  1.0673e-02 -3.9198e-01\nAboh-Mbaise         9.1734e-03 -3.5249e-05  3.8671e-03  1.4808e-01\nAbua/Odual          1.3806e-03 -1.9671e-05  2.1581e-03  3.0143e-02\nAbuja Municipal     1.0191e-01 -9.6479e-04  9.2408e-02  3.3842e-01\nAdavi               7.4353e-01 -1.1287e-03  1.7363e-01  1.7871e+00\nAdo                -1.9818e-02 -1.7819e-04  1.7081e-02 -1.5028e-01\nAdo-Odo/Ota        -1.0713e-01 -1.0647e-04  1.1680e-02 -9.9033e-01\nAdo Ekiti          -3.7915e-02 -1.5482e-04  2.3839e-02 -2.4456e-01\nAfijio              1.6042e-02 -3.0426e-06  7.8297e-04  5.7342e-01\nAfikpo North        9.5682e-03 -8.7733e-05  1.3510e-02  8.3075e-02\nAfikpo South        5.0871e-02 -5.8026e-04  7.4325e-02  1.8872e-01\nAgaie              -6.6202e-02 -5.3678e-04  8.2618e-02 -2.2845e-01\nAgatu               1.9248e+00 -2.7681e-03  4.2510e-01  2.9564e+00\nAgege               1.0894e+00 -2.5073e-03  6.4360e-01  1.3610e+00\nAguata              7.6625e-01 -1.1875e-03  1.8266e-01  1.7957e+00\nAgwara              1.6960e-01 -9.4099e-05  1.8136e-02  1.2601e+00\nAhiazu-Mbaise       7.4044e-02 -1.3313e-04  1.4604e-02  6.1381e-01\nAhoada East        -5.4543e-01 -8.1752e-04  1.5745e-01 -1.3725e+00\nAhoada West        -4.6771e-01 -3.7801e-03  5.7993e-01 -6.0920e-01\nAiyedade           -4.4750e-03 -3.6195e-05  3.9709e-03 -7.0440e-02\nAiyedire            3.9482e-02 -3.2938e-05  3.6136e-03  6.5735e-01\nAiyekire (Gbonyin)  9.9201e-03 -3.1751e-06  3.0440e-04  5.6876e-01\nAjaokuta            8.9227e-01 -1.6977e-03  2.1721e-01  1.9181e+00\nAjeromi-Ifelodun    1.3779e+00 -1.6072e-03  4.1292e-01  2.1467e+00\nAjingi              1.0218e+00 -9.0811e-04  1.1628e-01  2.9992e+00\nAkamkpa             4.4244e-02 -8.2188e-06  9.0170e-04  1.4737e+00\nAkinyele            3.3688e-02 -9.9884e-06  1.0958e-03  1.0180e+00\nAkko                7.5012e-01 -1.3593e-03  1.3014e-01  2.0831e+00\nAkoko-Edo           7.4851e-01 -8.7671e-04  6.0836e-02  3.0383e+00\nAkoko North East    5.3052e-01 -8.4037e-04  9.2121e-02  1.7507e+00\nAkoko North West   -9.1353e-03 -1.6107e-03  3.0995e-01 -1.3516e-02\nAkoko South East    1.5725e+00 -3.0038e-03  5.7723e-01  2.0737e+00\nAkoko South West    7.4897e-01 -9.9569e-04  1.5318e-01  1.9162e+00\nAkpabuyo            4.3627e-01 -8.2761e-04  1.5939e-01  1.0948e+00\nAkuku Toru         -7.4085e-02 -1.5838e-04  4.0750e-02 -3.6622e-01\nAkure North         1.6263e-01 -1.3567e-03  1.7364e-01  3.9352e-01\nAkure South        -1.0666e+00 -1.4949e-03  3.8411e-01 -1.7185e+00\nAkwanga            -2.3639e-01 -4.2431e-04  8.1750e-02 -8.2527e-01\nAlbasu              3.0822e-01 -9.8120e-05  1.5109e-02  2.5083e+00\nAleiro              7.6914e-02 -1.4076e-04  2.7127e-02  4.6785e-01\nAlimosho            4.7725e-01 -5.2546e-04  5.7619e-02  1.9904e+00\nAlkaleri           -3.6657e-02 -1.3378e-04  1.2824e-02 -3.2252e-01\nAmuwo-Odofin        7.9332e-01 -7.4280e-04  7.1161e-02  2.9767e+00\nAnambra East        2.1574e-01 -4.7513e-04  6.0866e-02  8.7638e-01\nAnambra West       -2.9204e-02 -5.7829e-05  5.5439e-03 -3.9145e-01\nAnaocha             7.3091e-01 -8.2145e-04  9.0049e-02  2.4384e+00\nAndoni             -4.3655e-01 -2.4262e-03  6.2283e-01 -5.5008e-01\nAninri              8.2526e-01 -3.7801e-03  5.7993e-01  1.0886e+00\nAniocha North      -7.0709e-01 -6.5831e-03  1.2605e+00 -6.2393e-01\nAniocha South      -1.4809e-01 -7.7855e-05  8.5409e-03 -1.6016e+00\nAnka                8.7867e-02 -4.1651e-04  6.4115e-02  3.4866e-01\nAnkpa               2.7506e+00 -4.6866e-03  5.1177e-01  3.8515e+00\nApa                 2.2225e+00 -1.9216e-03  2.9535e-01  4.0930e+00\nApapa               1.8806e+00 -3.7801e-03  4.8265e-01  2.7123e+00\nArdo-Kola          -1.2718e-02 -5.0964e-05  6.5315e-03 -1.5674e-01\nArewa-Dandi         2.8243e-03 -1.6529e-08  1.5847e-06  2.2436e+00\nArgungu             7.6334e-02 -3.0647e-04  4.7181e-02  3.5284e-01\nArochukwu          -2.3885e-01 -1.8395e-04  2.3572e-02 -1.5545e+00\nAsa                -3.8317e-02 -9.3275e-05  1.0232e-02 -3.7787e-01\nAsari-Toru          3.2181e-01 -1.2955e-03  5.0007e-01  4.5690e-01\nAskira/Uba          4.4476e-01 -7.9553e-04  6.7653e-02  1.7130e+00\nAtakumosa East      1.1495e-01 -8.3232e-05  1.2816e-02  1.0161e+00\nAtakumosa West      9.6189e-02 -1.0352e-04  8.8096e-03  1.0259e+00\nAtiba               1.5449e-01 -2.9478e-04  2.8253e-02  9.2088e-01\nAtigbo             -2.4407e-01 -2.7055e-04  3.4665e-02 -1.3094e+00\nAugie               2.3962e-01 -2.2947e-04  2.9403e-02  1.3988e+00\nAuyo                1.3500e+00 -1.9577e-03  2.1436e-01  2.9201e+00\nAwe                 9.8490e-02 -1.4706e-04  1.4097e-02  8.3075e-01\nAwgu                1.8010e-01 -7.7855e-05  9.9774e-03  1.8039e+00\nAwka North          2.3937e-01 -3.7801e-03  4.1316e-01  3.7829e-01\nAwka South          3.9680e-01 -5.2788e-04  8.1250e-02  1.3939e+00\nAyamelum           -9.9360e-01 -1.3730e-03  2.1115e-01 -2.1593e+00\nBabura              3.9697e-01 -1.1764e-03  1.8095e-01  9.3597e-01\nBadagry             9.7761e-02 -4.3383e-04  1.1159e-01  2.9395e-01\nBade                8.0832e-01 -7.7864e-04  1.4997e-01  2.0893e+00\nBagudo             -1.7151e-01 -2.4891e-05  3.8331e-03 -2.7698e+00\nBagwai              8.3615e-01 -1.0332e-03  1.1324e-01  2.4878e+00\nBakassi             0.0000e+00  0.0000e+00  0.0000e+00         NaN\nBakori              6.9808e-01 -2.2337e-03  2.8564e-01  1.3103e+00\nBakura              1.7476e-01 -2.1274e-03  2.7208e-01  3.3913e-01\nBalanga            -9.2064e-02 -1.9820e-04  2.1741e-02 -6.2304e-01\nBali                3.3571e-02 -1.1950e-04  1.0170e-02  3.3409e-01\nBama                2.9221e+00 -3.7801e-03  7.2586e-01  3.4342e+00\nBarikin Ladi        2.0994e-03 -3.4270e-06  4.3921e-04  1.0034e-01\nBaruten             2.8872e-02 -1.4726e-04  1.8870e-02  2.1125e-01\nBassa               1.0837e+00 -1.5233e-03  1.4582e-01  2.8419e+00\nBassa.1             2.1007e-01 -3.4159e-04  4.3765e-02  1.0058e+00\nBatagarawa         -1.9967e-02 -2.6474e-05  2.9044e-03 -3.7000e-01\nBatsari             4.0673e-02 -3.4356e-05  5.2906e-03  5.5965e-01\nBauchi              3.8567e-01 -6.8383e-04  1.0524e-01  1.1910e+00\nBaure              -1.0961e-01 -2.2892e-05  3.5253e-03 -1.8457e+00\nBayo                1.3919e-01 -1.3378e-04  2.0599e-02  9.7078e-01\nBebeji              5.6777e-01 -1.8232e-03  2.8026e-01  1.0759e+00\nBekwara            -6.3674e-02 -1.4381e-04  2.2143e-02 -4.2694e-01\nBende              -9.6268e-02 -3.4958e-04  3.3504e-02 -5.2403e-01\nBiase               1.2532e-01 -2.0421e-04  1.9574e-02  8.9722e-01\nBichi               2.7681e-01 -7.7855e-05  9.9774e-03  2.7720e+00\nBida               -2.6337e-01 -1.6143e-03  6.2293e-01 -3.3164e-01\nBilliri             1.4430e-01 -8.9847e-04  1.7302e-01  3.4908e-01\nBindawa             4.4692e-01 -7.8468e-04  1.0049e-01  1.4123e+00\nBinji               5.9725e-01 -2.1292e-03  2.7230e-01  1.1486e+00\nBiriniwa            1.0800e+00 -1.0622e-03  1.3599e-01  2.9315e+00\nBirni Kudu          1.1793e+00 -1.8649e-03  1.7846e-01  2.7959e+00\nBirnin-Gwari        1.0523e+00 -3.4129e-03  2.6018e-01  2.0698e+00\nBirnin Kebbi       -6.1373e-01 -1.4949e-03  1.9131e-01 -1.3998e+00\nBirnin Magaji       3.8265e-01 -5.9689e-04  7.6454e-02  1.3861e+00\nBiu                 1.2705e+00 -3.7801e-03  3.6104e-01  2.1208e+00\nBodinga             3.3513e-01 -4.2419e-04  6.5297e-02  1.3131e+00\nBogoro              5.1520e-01 -6.5526e-04  1.6851e-01  1.2566e+00\nBoki               -1.7271e-03 -8.5335e-08  1.3141e-05 -4.7639e-01\nBokkos             -3.6040e-02 -3.4958e-04  4.4789e-02 -1.6864e-01\nBoluwaduro          4.6738e-02 -3.8171e-05  7.3571e-03  5.4535e-01\nBomadi              2.8292e+00 -4.4722e-03  6.8563e-01  3.4223e+00\nBonny               3.4281e-01 -3.7801e-03  4.8265e-01  4.9888e-01\nBorgu              -2.8043e-01 -4.7814e-04  4.0675e-02 -1.3881e+00\nBoripe              1.8050e-01 -4.2867e-04  5.4917e-02  7.7207e-01\nBosso              -1.6959e-01 -5.8400e-04  7.4804e-02 -6.1795e-01\nBrass               2.8480e+00 -3.9671e-03  1.5272e+00  2.3078e+00\nBuji                8.0392e-01 -1.6124e-03  2.4791e-01  1.6178e+00\nBukkuyum           -1.1565e-02 -1.9441e-04  2.9933e-02 -6.5722e-02\nBungudu             9.8178e-02 -5.9215e-05  7.5888e-03  1.1277e+00\nBunkure             3.2673e-01 -4.4333e-04  4.8617e-02  1.4838e+00\nBunza               1.2468e+00 -1.3848e-03  2.1296e-01  2.7048e+00\nBursari             9.0054e-01 -8.8354e-04  8.4633e-02  3.0986e+00\nBuruku              2.0770e-02 -4.3366e-05  5.5578e-03  2.7918e-01\nBurutu              6.3132e-01 -1.4076e-04  2.7127e-02  3.8340e+00\nBwari               2.1399e-01 -5.1249e-04  9.8731e-02  6.8266e-01\nCalabar-Municipal  -2.0755e-01 -5.2100e-05  1.3406e-02 -1.7920e+00\nCalabar South       5.9487e-01 -2.6060e-03  5.0100e-01  8.4411e-01\nChanchaga          -6.2759e-01 -1.1287e-03  8.7265e-01 -6.7062e-01\nCharanchi           1.5392e-01 -3.5775e-04  4.5835e-02  7.2064e-01\nChibok              7.7879e-01 -3.9975e-04  1.0283e-01  2.4299e+00\nChikun              1.0655e+00 -1.2025e-02  1.1390e+00  1.0096e+00\nDala               -1.2266e-01 -1.8028e-05  3.4748e-03 -2.0805e+00\nDamaturu            1.4926e+00 -2.3346e-03  3.5869e-01  2.4961e+00\nDamban             -2.2847e-01 -2.0163e-03  2.5790e-01 -4.4591e-01\nDambatta            2.3295e-02 -6.1144e-07  9.4161e-05  2.4007e+00\nDamboa              2.4779e+00 -3.7801e-03  3.6104e-01  4.1301e+00\nDan Musa            8.2153e-01 -1.8288e-03  2.0027e-01  1.8398e+00\nDandi               1.1931e+00 -3.4616e-03  6.6492e-01  1.4674e+00\nDandume             2.7987e-02 -6.2985e-06  1.2140e-03  8.0341e-01\nDange-Shuni        -1.7603e-02 -2.7000e-05  2.9622e-03 -3.2294e-01\nDanja              -4.5872e-02 -2.1259e-04  2.7241e-02 -2.7664e-01\nDarazo              1.1172e-01 -5.8026e-04  6.3624e-02  4.4520e-01\nDass                1.1122e+00 -2.3903e-03  9.2163e-01  1.1610e+00\nDaura               2.8260e-01 -4.4121e-03  1.1304e+00  2.6996e-01\nDawakin Kudu        1.7281e-01 -1.0781e-04  1.3816e-02  1.4711e+00\nDawakin Tofa        1.7771e+00 -2.6945e-03  3.4441e-01  3.0327e+00\nDegema              3.7854e-01 -3.4958e-04  3.3504e-02  2.0700e+00\nDekina              2.6563e+00 -3.0642e-03  5.8881e-01  3.4657e+00\nDemsa               1.9157e-01 -4.8349e-04  5.3019e-02  8.3410e-01\nDikwa               2.9221e+00 -3.7801e-03  4.8265e-01  4.2115e+00\nDoguwa             -1.3474e-01 -7.2763e-05  9.3250e-03 -1.3946e+00\nDoma                1.1473e-01 -2.1534e-05  1.8327e-03  2.6804e+00\nDonga               7.7116e-02 -2.3409e-04  2.2438e-02  5.1638e-01\nDukku               1.4433e+00 -7.1389e-03  7.7763e-01  1.6448e+00\nDunukofia           1.2670e-02 -3.9951e-07  6.1524e-05  1.6154e+00\nDutse               1.6800e+00 -3.5118e-03  3.3550e-01  2.9064e+00\nDutsi              -2.5258e-02 -1.3854e-05  1.5200e-03 -6.4750e-01\nDutsin-Ma           4.4227e-01 -5.9410e-04  7.6098e-02  1.6054e+00\nEastern Obolo       2.3066e+00 -6.7695e-03  1.0354e+00  2.2735e+00\nEbonyi              8.2166e-01 -1.2357e-03  1.5818e-01  2.0690e+00\nEdati               1.6097e-02 -2.2456e-04  8.6771e-02  5.5407e-02\nEde North           1.1448e-01 -4.7814e-04  1.2298e-01  3.2782e-01\nEde South          -3.1977e-02 -2.4859e-04  2.1152e-02 -2.1816e-01\nEdu                 3.4713e-01 -6.4646e-04  9.9490e-02  1.1026e+00\nEfon                1.6921e-01 -6.7549e-04  1.3011e-01  4.7099e-01\nEgbado North       -7.7998e-02 -1.6990e-05  2.6164e-03 -1.5245e+00\nEgbado South        3.9709e-01 -2.5793e-03  3.9618e-01  6.3497e-01\nEgbeda             -1.3147e-02 -2.2340e-06  3.4403e-04 -7.0871e-01\nEgbedore           -1.3817e-02 -7.6400e-05  7.3241e-03 -1.6056e-01\nEgor                3.8061e-01 -7.4965e-04  1.9276e-01  8.6860e-01\nEhime-Mbano         2.7616e-01 -4.9586e-04  7.6323e-02  1.0014e+00\nEjigbo              7.6811e-02 -2.1455e-04  2.3534e-02  5.0210e-01\nEkeremor            3.6037e+00 -7.9060e-03  1.5118e+00  2.9373e+00\nEket                5.7575e-01 -2.7351e-04  5.2704e-02  2.5091e+00\nEkiti               8.4378e-01 -1.6837e-03  2.1543e-01  1.8215e+00\nEkiti East         -1.0463e+00 -2.9027e-03  4.4571e-01 -1.5628e+00\nEkiti South West    2.3209e-01 -4.3762e-04  4.7991e-02  1.0614e+00\nEkiti West         -1.1483e-02 -2.2793e-06  2.1852e-04 -7.7661e-01\nEkwusigo            1.1564e+00 -2.2298e-03  3.4262e-01  1.9794e+00\nEleme               1.1154e+00 -3.7801e-03  4.8265e-01  1.6110e+00\nEmohua              5.3008e-02 -1.9671e-05  1.8859e-03  1.2211e+00\nEmure              -6.0284e-02 -1.9851e-04  3.0565e-02 -3.4368e-01\nEnugu East          5.2596e-01 -1.0061e-03  1.5478e-01  1.3395e+00\nEnugu North         1.4384e+00 -2.9541e-03  4.5359e-01  2.1402e+00\nEnugu South         1.1227e+00 -2.7537e-03  7.0665e-01  1.3388e+00\nEpe                -1.0862e-01 -7.7320e-05  7.4123e-03 -1.2607e+00\nEsan Central        1.2244e+00 -2.0686e-03  3.9789e-01  1.9444e+00\nEsan North East     1.3278e+00 -1.5358e-03  2.3615e-01  2.7355e+00\nEsan South East     1.3009e+00 -3.6920e-03  3.1306e-01  2.3317e+00\nEsan West           8.2212e-01 -8.4810e-04  1.0860e-01  2.4972e+00\nEse-Odo             1.6062e+00 -2.3027e-03  3.5380e-01  2.7043e+00\nEsit - Eket         2.3846e+00 -4.4722e-03  5.7061e-01  3.1627e+00\nEssien Udim         2.1749e+00 -2.8725e-03  3.1425e-01  3.8849e+00\nEtche              -2.7135e-01 -3.8356e-04  4.2066e-02 -1.3212e+00\nEthiope East        1.1113e+00 -2.2492e-03  4.3256e-01  1.6932e+00\nEthiope West        1.8342e+00 -3.0134e-03  4.6266e-01  2.7010e+00\nEti-Osa             8.9467e-01 -3.7801e-03  5.7993e-01  1.1798e+00\nEtim Ekpo           2.3810e+00 -2.4262e-03  3.1020e-01  4.2793e+00\nEtinan              2.0481e+00 -4.9761e-03  7.6250e-01  2.3512e+00\nEtsako Central      1.3102e+00 -1.7569e-03  2.7009e-01  2.5244e+00\nEtsako East         9.5134e-01 -1.0393e-03  8.8362e-02  3.2039e+00\nEtsako West        -1.1503e-01 -1.9671e-05  2.1581e-03 -2.4756e+00\nEtung               9.4604e-02 -6.5764e-04  1.6912e-01  2.3164e-01\nEwekoro             4.3386e-01 -9.3526e-04  1.1976e-01  1.2564e+00\nEzeagu              5.4909e-01 -7.7983e-04  1.2000e-01  1.5873e+00\nEzinihitte         -3.0053e-02 -1.1673e-05  1.7976e-03 -7.0857e-01\nEzza North          5.0244e-01 -7.6344e-04  9.7771e-02  1.6093e+00\nEzza South          5.3312e-01 -8.2831e-04  1.2745e-01  1.4956e+00\nFagge               6.9386e-01 -2.5620e-03  3.9354e-01  1.1101e+00\nFakai              -5.1400e-01 -9.2209e-04  1.0107e-01 -1.6139e+00\nFaskari            -1.7603e-02 -4.9701e-04  4.7626e-02 -7.8382e-02\nFika               -4.7735e-02 -6.4784e-04  5.5102e-02 -2.0059e-01\nFufore              4.3357e-01 -3.7801e-03  4.8265e-01  6.2953e-01\nFunakaye            9.7216e-01 -1.4823e-03  2.2793e-01  2.0394e+00\nFune                4.6535e-01 -2.4599e-04  2.3578e-02  3.0322e+00\nFuntua              6.9002e-02 -3.9679e-04  6.1081e-02  2.8080e-01\nGabasawa            1.4210e+00 -3.2500e-03  4.1518e-01  2.2105e+00\nGada               -1.6103e-02 -3.2218e-07  6.2100e-05 -2.0434e+00\nGagarawa            1.1052e+00 -2.3806e-03  3.0438e-01  2.0076e+00\nGamawa              4.3937e-02 -2.2022e-05  2.8224e-03  8.2744e-01\nGanjuwa             1.5168e-01 -1.4624e-03  1.4000e-01  4.0928e-01\nGanye               3.1356e-03 -1.2990e-07  2.5038e-05  6.2667e-01\nGarki               8.8292e-01 -7.3420e-04  7.0338e-02  3.3318e+00\nGarko               4.6706e-01 -1.6265e-03  1.7816e-01  1.1104e+00\nGarum Mallam        3.2873e-01 -2.6682e-04  4.1079e-02  1.6232e+00\nGashaka             7.2154e-03 -3.5249e-05  6.7939e-03  8.7966e-02\nGassol              3.7619e-03 -3.2292e-05  4.1386e-03  5.8978e-02\nGaya                1.3281e+00 -3.4617e-03  6.6493e-01  1.6330e+00\nGbako              -6.6000e-02 -1.1851e-04  1.8248e-02 -4.8771e-01\nGboko               6.3051e-03 -4.1375e-06  6.3716e-04  2.4995e-01\nGeidam              2.1810e+00 -3.7801e-03  4.8265e-01  3.1447e+00\nGezawa              1.4122e-01 -3.4179e-05  5.2634e-03  1.9470e+00\nGiade               1.8010e-01 -1.3679e-04  2.6363e-02  1.1101e+00\nGirei               6.7684e-01 -1.4949e-03  2.2987e-01  1.4148e+00\nGiwa                6.7092e-01 -9.0352e-04  7.6828e-02  2.4238e+00\nGokana             -2.7733e-01 -5.8026e-04  1.1178e-01 -8.2777e-01\nGombe               1.1414e+00 -1.1471e-03  4.4283e-01  1.7170e+00\nGombi               1.3297e-02 -3.9951e-07  5.1203e-05  1.8583e+00\nGoronyo            -1.0035e-01 -2.3559e-03  3.0123e-01 -1.7855e-01\nGubio               2.5606e+00 -3.7801e-03  5.7993e-01  3.3673e+00\nGudu                8.9840e-01 -1.3634e-03  3.5037e-01  1.5201e+00\nGujba               1.6961e+00 -3.7801e-03  4.1316e-01  2.6446e+00\nGulani             -1.2152e-01 -5.8026e-04  6.3624e-02 -4.7948e-01\nGuma                2.2477e-01 -7.6981e-04  6.5467e-02  8.8150e-01\nGumel              -9.0867e-02 -1.0957e-05  2.8195e-03 -1.7111e+00\nGummi              -3.7968e-02 -6.1482e-05  6.7450e-03 -4.6155e-01\nGurara             -7.3498e-02 -1.8169e-04  1.9930e-02 -5.1933e-01\nGuri                1.3940e+00 -2.7043e-03  2.9589e-01  2.5677e+00\nGusau               2.6351e-02 -7.0358e-06  6.7454e-04  1.0149e+00\nGuyuk              -4.3901e-01 -5.8026e-04  1.1178e-01 -1.3114e+00\nGuzamala            2.9221e+00 -3.7801e-03  4.8265e-01  4.2115e+00\nGwadabawa           2.6569e-01 -2.2744e-04  2.9143e-02  1.5577e+00\nGwagwalada          1.3283e-01 -1.5589e-04  1.9977e-02  9.4091e-01\nGwale               5.5269e-01 -8.8439e-04  1.7031e-01  1.3414e+00\nGwandu              8.5414e-02 -3.5530e-04  6.8460e-02  3.2780e-01\nGwaram              7.2778e-01 -1.7419e-03  1.6671e-01  1.7867e+00\nGwarzo              6.7150e-01 -1.6988e-03  2.1735e-01  1.4440e+00\nGwer East           2.2928e-01 -1.9769e-03  1.6792e-01  5.6435e-01\nGwer West           2.0642e+00 -7.2609e-03  9.2384e-01  2.1551e+00\nGwiwa               1.0453e-01 -8.0172e-05  1.0274e-02  1.0321e+00\nGwoza               2.9221e+00 -3.7801e-03  7.2586e-01  3.4342e+00\nHadejia            -4.2115e-01 -1.7935e-04  4.6144e-02 -1.9597e+00\nHawul               1.2267e+00 -2.5793e-03  3.9618e-01  1.9530e+00\nHong               -3.6270e-01 -3.4958e-04  4.4789e-02 -1.7122e+00\nIbadan North        1.3390e-01 -1.6596e-03  2.5515e-01  2.6836e-01\nIbadan North East   5.6454e-03 -7.0845e-07  9.0798e-05  5.9254e-01\nIbadan North West   2.0797e-01 -1.5139e-04  2.3310e-02  1.3632e+00\nIbadan South East   1.5142e-01 -1.0863e-03  1.6711e-01  3.7308e-01\nIbadan South West   3.3535e-01 -4.6209e-04  8.9025e-02  1.1255e+00\nIbaji               1.2892e+00 -5.5390e-03  6.0433e-01  1.6656e+00\nIbarapa Central     3.8673e-02 -1.7325e-05  2.6679e-03  7.4906e-01\nIbarapa East        3.5113e-02 -7.6031e-06  9.7444e-04  1.1251e+00\nIbarapa North       8.1118e-02 -1.9671e-05  3.0293e-03  1.4742e+00\nIbeju/Lekki         7.2852e-02 -1.2798e-05  4.9462e-03  1.0360e+00\nIbeno               1.7517e+00 -1.6977e-03  2.6099e-01  3.4321e+00\nIbesikpo Asutan     1.1779e+00 -9.2581e-04  1.4244e-01  3.1234e+00\nIbi                -2.5905e-02 -1.2978e-04  1.4237e-02 -2.1602e-01\nIbiono Ibom         1.1050e+00 -1.8101e-03  2.3157e-01  2.3000e+00\nIdah                1.7130e+00 -2.1017e-03  5.3969e-01  2.3346e+00\nIdanre              6.2808e-01 -8.4247e-04  7.1641e-02  2.3497e+00\nIdeato North        3.1728e-01 -1.3715e-03  1.3131e-01  8.7936e-01\nIdeato South        7.8427e-02 -2.8348e-04  5.4625e-02  3.3677e-01\nIdemili North       8.1600e-01 -2.9700e-03  3.2487e-01  1.4368e+00\nIdemili South       1.3703e+00 -2.4264e-03  3.1022e-01  2.4646e+00\nIdo                 1.7661e-01 -1.7681e-04  1.6948e-02  1.3580e+00\nIdo-Osi            -5.6529e-01 -2.5793e-03  3.9618e-01 -8.9401e-01\nIfako-Ijaye         1.9829e-01 -6.6848e-05  1.0294e-02  1.9551e+00\nIfe Central         2.8258e-01 -1.6612e-03  3.1967e-01  5.0273e-01\nIfe East            3.9556e-01 -7.8388e-04  1.5097e-01  1.0200e+00\nIfe North           1.0184e-01 -1.8145e-04  1.9903e-02  7.2316e-01\nIfe South           1.8227e-01 -7.5776e-05  9.7111e-03  1.8503e+00\nIfedayo             1.4189e-01 -9.6563e-05  1.2375e-02  1.2764e+00\nIfedore             6.1566e-01 -1.6977e-03  1.8594e-01  1.4317e+00\nIfelodun            2.2520e-01 -3.1263e-04  2.1706e-02  1.5307e+00\nIfelodun.1          2.8585e-01 -1.7427e-03  4.4768e-01  4.2983e-01\nIfo                 6.6681e-01 -1.6698e-03  1.4188e-01  1.7747e+00\nIgabi               8.1390e-01 -4.1840e-03  3.5461e-01  1.3738e+00\nIgalamela-Odolu     2.4945e-01 -1.4708e-03  1.2499e-01  7.0973e-01\nIgbo-Etiti          2.2220e-01 -2.1926e-04  3.3759e-02  1.2105e+00\nIgbo-Eze North     -6.5842e-03 -2.4264e-03  3.7275e-01 -6.8102e-03\nIgbo-Eze South      8.5630e-01 -2.1513e-03  4.1377e-01  1.3346e+00\nIgueben             2.2444e+00 -5.6899e-03  7.2509e-01  2.6425e+00\nIhiala              3.1376e-01 -5.5678e-04  6.1052e-02  1.2721e+00\nIhitte/Uboma        1.6046e-01 -3.7383e-04  5.7547e-02  6.7046e-01\nIjebu East         -8.1259e-01 -2.5443e-03  2.1599e-01 -1.7430e+00\nIjebu North        -4.6895e-02 -8.6652e-04  8.3004e-02 -1.5976e-01\nIjebu North East   -1.5244e-01 -2.7166e-04  5.2348e-02 -6.6510e-01\nIjebu Ode           1.0411e-01 -2.0366e-04  3.9248e-02  5.2656e-01\nIjero              -1.4774e-01 -3.9739e-04  6.1173e-02 -5.9574e-01\nIjumu               6.1615e-01 -6.4981e-04  6.2259e-02  2.4720e+00\nIka                 3.2952e+00 -6.6779e-03  1.2786e+00  2.9201e+00\nIka North East     -2.2710e+00 -3.7801e-03  5.7993e-01 -2.9771e+00\nIka South           1.7574e-01 -4.0988e-03  7.8680e-01  2.0274e-01\nIkara               4.3002e-01 -1.6198e-03  1.7742e-01  1.0248e+00\nIkeduru            -1.7517e-02 -1.9671e-05  3.0293e-03 -3.1791e-01\nIkeja               1.4782e+00 -2.8444e-03  2.7193e-01  2.8402e+00\nIkenne             -1.3475e-02 -6.4784e-04  1.2479e-01 -3.6310e-02\nIkere               2.8632e-01 -1.1419e-03  1.7566e-01  6.8588e-01\nIkole               1.6612e-02 -2.0269e-06  2.2238e-04  1.1141e+00\nIkom                6.1917e-02 -1.3788e-04  1.7670e-02  4.6684e-01\nIkono               1.3783e+00 -1.5233e-03  1.6687e-01  3.3778e+00\nIkorodu             1.6112e-01 -2.7416e-04  4.2209e-02  7.8558e-01\nIkot Abasi          1.3408e+00 -1.2882e-03  1.9812e-01  3.0152e+00\nIkot Ekpene         2.2139e+00 -3.0294e-03  7.7720e-01  2.5147e+00\nIkpoba-Okha         8.6723e-01 -1.1876e-03  1.3013e-01  2.4073e+00\nIkwerre            -1.4435e-02 -2.6123e-03  5.0220e-01 -1.6683e-02\nIkwo                2.1610e-01 -1.3096e-03  1.6762e-01  5.3103e-01\nIkwuano             9.5275e-02 -5.3205e-05  6.8186e-03  1.1544e+00\nIla                 4.2488e-02 -1.4506e-05  1.5914e-03  1.0654e+00\nIlaje               9.5498e-01 -7.3112e-04  1.4082e-01  2.5468e+00\nIle-Oluji-Okeigbo   9.5697e-01 -2.5563e-03  3.9267e-01  1.5313e+00\nIlejemeji           1.6272e-01 -1.0393e-03  2.0012e-01  3.6606e-01\nIlesha East         6.0325e-02 -5.5753e-05  1.0746e-02  5.8248e-01\nIlesha West         1.1051e-01 -3.2089e-04  6.1830e-02  4.4570e-01\nIllela              5.7740e-01 -1.2786e-03  3.2860e-01  1.0095e+00\nIlorin East        -3.9598e-02 -5.6534e-05  1.0896e-02 -3.7881e-01\nIlorin South        7.6791e-03 -5.1813e-06  9.9867e-04  2.4316e-01\nIlorin West         2.7446e-03 -5.1813e-06  7.9790e-04  9.7347e-02\nImeko-Afon         -1.6679e-02 -3.7801e-03  5.7993e-01 -1.6938e-02\nIngawa              5.9619e-01 -1.8776e-03  1.5950e-01  1.4975e+00\nIni                 6.6049e-01 -1.8225e-03  2.3316e-01  1.3716e+00\nIpokia             -1.9285e-02 -4.1357e-05  7.9712e-03 -2.1554e-01\nIrele               1.8394e+00 -2.5649e-03  4.9312e-01  2.6231e+00\nIrepo               8.3211e-03 -4.0565e-05  7.8185e-03  9.4565e-02\nIrepodun            5.3525e-01 -1.5909e-03  2.0358e-01  1.1898e+00\nIrepodun.1          5.1632e-02 -5.8255e-05  1.4990e-02  4.2219e-01\nIrepodun/Ifelodun  -4.0214e-02 -2.5750e-04  2.4681e-02 -2.5434e-01\nIrewole             3.3353e-02 -2.4363e-04  3.7509e-02  1.7347e-01\nIsa                -6.7674e-02 -1.0511e-03  1.3457e-01 -1.8161e-01\nIse/Orun           -6.7591e-01 -3.2028e-03  4.0917e-01 -1.0517e+00\nIseyin              3.9999e-01 -1.7731e-03  1.6969e-01  9.7531e-01\nIshielu             3.0217e-02 -6.5784e-06  7.2172e-04  1.1250e+00\nIsi-Uzo            -9.2384e-01 -4.2770e-03  3.6246e-01 -1.5274e+00\nIsiala-Ngwa North  -1.8491e-02 -3.5018e-06  5.3927e-04 -7.9612e-01\nIsiala-Ngwa South   4.2050e-01 -8.6652e-04  9.4986e-02  1.3672e+00\nIsiala Mbano        9.0016e-02 -2.2744e-04  2.9143e-02  5.2863e-01\nIsin                3.6311e-02 -2.1128e-06  5.4369e-04  1.5574e+00\nIsiukwuato          9.7046e-03 -1.9009e-04  2.9268e-02  5.7837e-02\nIsokan              7.9356e-02 -4.4836e-05  6.9044e-03  9.5557e-01\nIsoko North         9.1053e-01 -1.9216e-03  3.6967e-01  1.5007e+00\nIsoko South         1.1420e+00 -1.2100e-03  1.8611e-01  2.6500e+00\nIsu                -6.5380e-01 -2.2298e-03  4.2884e-01 -9.9499e-01\nItas/Gadau          3.1539e-01 -1.8525e-04  1.7757e-02  2.3682e+00\nItesiwaju           3.6253e-01 -1.9900e-03  3.8281e-01  5.8915e-01\nItu                 2.4586e+00 -4.4722e-03  8.5815e-01  2.6588e+00\nIvo                -5.6320e-02 -2.1534e-05  2.7599e-03 -1.0716e+00\nIwajowa             1.4533e-01 -6.0700e-05  7.7790e-03  1.6484e+00\nIwo                 1.2540e-01 -2.7416e-04  4.2209e-02  6.1172e-01\nIzzi                6.4390e-01 -2.1091e-03  3.2410e-01  1.1347e+00\nJaba                2.6060e-01 -1.8101e-03  2.7825e-01  4.9748e-01\nJada               -2.4621e-01 -1.4076e-04  3.6216e-02 -1.2930e+00\nJahun               1.4966e+00 -1.4060e-03  1.7995e-01  3.5313e+00\nJakusko             8.5962e-01 -1.7576e-03  1.9249e-01  1.9633e+00\nJalingo            -3.5233e-02 -1.0913e-04  2.8081e-02 -2.0960e-01\nJama'are            1.7329e-01 -1.2604e-04  2.4290e-02  1.1127e+00\nJega                2.8473e-01 -4.2516e-04  5.4468e-02  1.2219e+00\nJema'a              7.0145e-02 -8.7839e-04  1.1248e-01  2.1177e-01\nJere                9.2240e-01 -3.9296e-04  7.5712e-02  3.3537e+00\nJibia               6.8701e-03 -1.4705e-05  2.2645e-03  1.4468e-01\nJos East            1.6478e-01 -2.6751e-04  3.4276e-02  8.9151e-01\nJos North           2.2046e-01 -6.7277e-04  1.2959e-01  6.1427e-01\nJos South          -1.6815e-01 -2.6599e-04  4.0952e-02 -8.2959e-01\nKabba/Bunu          7.0625e-01 -7.6205e-04  9.7593e-02  2.2632e+00\nKabo                6.3150e-01 -8.6398e-04  9.4707e-02  2.0548e+00\nKachia              9.9964e-02 -2.6668e-05  2.9257e-03  1.8486e+00\nKaduna North        1.3025e+00 -1.7467e-03  4.4868e-01  1.9471e+00\nKaduna South       -2.9733e+00 -2.8503e-03  7.3138e-01 -3.4733e+00\nKafin Hausa         1.7822e+00 -3.6951e-03  4.7183e-01  2.5999e+00\nKafur               3.0839e-01 -7.1277e-04  9.1287e-02  1.0231e+00\nKaga                2.4354e+00 -3.7801e-03  5.7993e-01  3.2030e+00\nKagarko             1.9461e-01 -3.2410e-03  3.5442e-01  3.3233e-01\nKaiama             -3.1808e-02 -4.4116e-05  5.6538e-03 -4.2243e-01\nKaita              -1.8751e-02 -2.1389e-05  2.7412e-03 -3.5773e-01\nKajola              2.0947e-01 -7.3988e-05  1.9038e-02  1.5186e+00\nKajuru              2.2137e-01 -3.0801e-03  2.6134e-01  4.3906e-01\nKala/Balge          2.9221e+00 -3.7801e-03  9.6907e-01  2.9722e+00\nKalgo               4.2123e-01 -2.9422e-03  4.5176e-01  6.3109e-01\nKaltungo           -2.8638e-01 -2.3330e-04  3.5920e-02 -1.5098e+00\nKanam               2.2045e-01 -2.9659e-04  3.2530e-02  1.2239e+00\nKankara             6.6336e-01 -8.4919e-04  9.3088e-02  2.1770e+00\nKanke               4.8330e-01 -7.5534e-04  1.1623e-01  1.4198e+00\nKankia              3.7540e-01 -2.9440e-04  3.2290e-02  2.0908e+00\nKano Municipal      5.3140e-01 -5.0111e-04  7.7132e-02  1.9152e+00\nKarasuwa            8.0017e-01 -6.8894e-04  1.0602e-01  2.4596e+00\nKaraye             -2.0137e-01 -1.2578e-04  1.9367e-02 -1.4461e+00\nKarim-Lamido       -8.3601e-02 -2.1259e-04  1.6260e-02 -6.5396e-01\nKaru                1.8067e-02 -1.0264e-06  8.7357e-05  1.9331e+00\nKatagum             1.9624e-02 -4.0565e-05  4.4503e-03  2.9478e-01\nKatcha             -8.8029e-03 -3.8217e-06  5.8853e-04 -3.6271e-01\nKatsina             2.6804e-03 -9.8515e-06  2.5351e-03  5.3431e-02\nKatsina-Ala        -5.7511e-02 -1.6599e-05  1.8211e-03 -1.3473e+00\nKaugama             1.6324e+00 -2.6889e-03  2.5709e-01  3.2247e+00\nKaura              -1.6257e-01 -1.0262e-04  1.9778e-02 -1.1553e+00\nKaura Namoda        2.3711e-01 -7.4280e-04  1.4307e-01  6.2883e-01\nKauru              -8.8357e-02 -6.5005e-05  1.0010e-02 -8.8248e-01\nKazaure             1.9549e-01 -1.7485e-04  1.9180e-02  1.4128e+00\nKeana               5.6967e-01 -7.5199e-04  1.4484e-01  1.4989e+00\nKebbe               2.0510e-01 -2.5812e-04  3.3074e-02  1.1292e+00\nKeffi              -1.0302e-01 -5.6160e-04  2.1694e-01 -2.1997e-01\nKhana               2.1572e-01 -1.1615e-04  9.8845e-03  2.1709e+00\nKibiya              3.8077e-01 -8.1452e-04  1.5687e-01  9.6342e-01\nKirfi               9.3141e-02 -1.7607e-04  2.7110e-02  5.6676e-01\nKiri Kasamma        7.2328e-01 -7.3906e-04  9.4652e-02  2.3533e+00\nKiru                3.0889e-01 -5.3049e-04  5.8170e-02  1.2829e+00\nKiyawa              1.0922e+00 -1.0863e-03  1.6711e-01  2.6744e+00\nKogi                3.1640e-01 -1.6977e-03  2.6099e-01  6.2265e-01\nKoko/Besse          9.8347e-01 -2.8088e-03  3.5897e-01  1.6461e+00\nKokona              1.2321e-02 -1.0474e-04  1.0040e-02  1.2400e-01\nKolokuma/Opokuma   -2.2445e+00 -2.8011e-03  7.1880e-01 -2.6440e+00\nKonduga             2.5188e+00 -3.7801e-03  2.8808e-01  4.7000e+00\nKonshisha          -3.1576e-02 -4.0957e-04  4.4917e-02 -1.4706e-01\nKontagora           9.0960e-02 -1.6130e-05  4.1508e-03  1.4121e+00\nKosofe              1.1469e+00 -1.9166e-03  3.6870e-01  1.8920e+00\nKubau               5.6919e-01 -2.2977e-03  3.5302e-01  9.6185e-01\nKudan               4.9264e-02 -1.2392e-03  1.5862e-01  1.2681e-01\nKuje                4.1305e-01 -7.3336e-04  1.1285e-01  1.2317e+00\nKukawa              2.9221e+00 -3.7801e-03  9.6907e-01  2.9722e+00\nKumbotso            7.3348e-01 -9.7851e-04  7.4781e-02  2.6858e+00\nKunchi              9.3023e-01 -1.8288e-03  3.5185e-01  1.5713e+00\nKura                8.8969e-02 -2.8156e-05  5.4268e-03  1.2081e+00\nKurfi               6.3326e-02 -2.4891e-05  3.8331e-03  1.0232e+00\nKurmi               8.6559e-02 -1.0237e-04  1.5763e-02  6.9025e-01\nKusada              1.1303e+00 -3.1865e-03  6.1224e-01  1.4486e+00\nKwali               1.7982e-01 -7.5776e-05  1.9498e-02  1.2883e+00\nKwami               1.5775e+00 -2.5332e-03  3.2384e-01  2.7766e+00\nKwande              1.5360e-01 -2.3696e-03  3.0297e-01  2.8336e-01\nKware              -6.0344e-03 -6.4131e-06  6.1483e-04 -2.4310e-01\nKwaya Kusar         1.5884e-01 -1.9671e-05  3.7915e-03  2.5799e+00\nLafia              -1.8671e-02 -4.4930e-06  4.3075e-04 -8.9938e-01\nLagelu             -4.8761e-02 -6.9613e-05  7.6368e-03 -5.5718e-01\nLagos Island        4.1707e-01 -1.1241e-04  2.1665e-02  2.8343e+00\nLagos Mainland      1.4535e+00 -2.8444e-03  4.3679e-01  2.2036e+00\nLamurde            -1.5238e-01 -3.7801e-03  4.8265e-01 -2.1390e-01\nLangtang North      1.8341e-01 -3.6250e-04  3.9756e-02  9.2169e-01\nLangtang South     -1.7643e-01 -2.1867e-04  4.2138e-02 -8.5839e-01\nLapai              -2.6233e-01 -4.9832e-04  6.3835e-02 -1.0363e+00\nLau                -2.1365e-01 -1.7935e-04  1.7192e-02 -1.6281e+00\nLavun              -5.7682e-02 -1.0852e-05  2.0917e-03 -1.2610e+00\nLere               -1.3772e-01 -4.1168e-05  6.3395e-03 -1.7292e+00\nLogo                7.7494e-02 -9.0928e-05  1.4001e-02  6.5568e-01\nLokoja             -2.7205e-01 -1.8071e-04  1.3821e-02 -2.3125e+00\nMachina             8.6034e-01 -8.4707e-04  1.3034e-01  2.3854e+00\nMadagali            2.0183e+00 -3.7801e-03  7.2586e-01  2.3734e+00\nMadobi              8.0908e-01 -1.5202e-03  1.4552e-01  2.1249e+00\nMafa                2.5921e+00 -3.7801e-03  4.8265e-01  3.7365e+00\nMagama              1.8292e-01 -1.9099e-04  2.4474e-02  1.1705e+00\nMagumeri            1.0189e+00 -5.4996e-04  6.0304e-02  4.1514e+00\nMai'adua            1.3640e-01 -2.0169e-04  3.1054e-02  7.7516e-01\nMaiduguri           1.7703e+00 -3.1737e-03  1.2227e+00  1.6039e+00\nMaigatari           4.8974e-01 -3.6866e-04  5.6752e-02  2.0573e+00\nMaiha              -4.4205e-02 -4.5003e-04  8.6704e-02 -1.4860e-01\nMaiyama             1.0112e+00 -9.5693e-04  1.2253e-01  2.8914e+00\nMakoda              1.1545e+00 -3.3935e-03  3.7104e-01  1.9010e+00\nMakurdi             2.3007e-01 -5.3969e-05  1.0402e-02  2.2564e+00\nMalam Madori        1.1150e+00 -2.5620e-03  3.9354e-01  1.7815e+00\nMalumfashi          8.7079e-01 -9.7196e-04  1.4953e-01  2.2544e+00\nMangu               9.7484e-02 -6.1863e-05  7.9282e-03  1.0955e+00\nMani               -3.8954e-02 -3.3570e-05  4.3024e-03 -5.9337e-01\nMaradun             1.6224e-01 -9.5716e-05  8.1455e-03  1.7987e+00\nMariga              3.3534e-01 -6.5224e-04  5.5475e-02  1.4265e+00\nMarkafi            -3.4633e-02 -3.2466e-03  6.2375e-01 -3.9741e-02\nMarte               2.9221e+00 -3.7801e-03  7.2586e-01  3.4342e+00\nMaru               -3.3101e-02 -1.2695e-04  1.0803e-02 -3.1724e-01\nMashegu             1.7340e-01 -2.3559e-03  2.2533e-01  3.7026e-01\nMashi               4.7911e-02 -4.5296e-04  8.7268e-02  1.6372e-01\nMatazu              4.4109e-01 -3.5792e-04  6.8964e-02  1.6810e+00\nMayo-Belwa          9.9586e-02 -3.4958e-04  2.9742e-02  5.7947e-01\nMbaitoli           -9.5982e-02 -4.4230e-04  3.7627e-02 -4.9253e-01\nMbo                 3.3917e+00 -5.3270e-03  1.0213e+00  3.3614e+00\nMichika            -9.6218e-02 -3.4958e-04  8.9927e-02 -3.1969e-01\nMiga                2.1531e+00 -3.4585e-03  5.3076e-01  2.9602e+00\nMikang              1.0752e-01 -5.6691e-05  1.4588e-02  8.9066e-01\nMinjibir            1.6359e+00 -3.5786e-03  3.9121e-01  2.6213e+00\nMisau              -1.6822e-02 -1.4015e-04  2.1579e-02 -1.1356e-01\nMkpat Enin          2.2642e+00 -2.6647e-03  3.4060e-01  3.8842e+00\nMoba                1.2487e-01 -1.1188e-04  1.4337e-02  1.0438e+00\nMobbar              2.9221e+00 -3.7801e-03  5.7993e-01  3.8420e+00\nMokwa               2.8095e-02 -3.6888e-05  2.0050e-03  6.2826e-01\nMonguno             2.9221e+00 -3.7801e-03  5.7993e-01  3.8420e+00\nMopa-Muro           1.5767e+00 -2.9094e-03  7.4651e-01  1.8282e+00\nMoro                1.5217e-02 -2.5184e-05  2.1433e-03  3.2924e-01\nMubi North          9.3372e-01 -1.2025e-02  2.2900e+00  6.2497e-01\nMubi South          1.9708e+00 -1.2025e-02  3.0573e+00  1.1340e+00\nMusawa              7.3597e-01 -1.3213e-03  1.2651e-01  2.0729e+00\nMushin              1.2762e+00 -1.2070e-03  1.8565e-01  2.9647e+00\nMuya                2.8982e-01 -2.0108e-04  3.8750e-02  1.4733e+00\nNafada              7.0209e-01 -8.9224e-04  1.7182e-01  1.6959e+00\nNangere             1.7671e-01 -2.3189e-04  2.9714e-02  1.0265e+00\nNasarawa           -5.6416e-01 -5.0074e-04  6.4145e-02 -2.2256e+00\nNasarawa.1          3.6631e-01 -2.6951e-04  2.5831e-02  2.2808e+00\nNasarawa-Eggon     -4.0645e-04 -2.2319e-04  4.3009e-02 -8.8369e-04\nNdokwa East         4.9998e-01 -1.1134e-03  1.0662e-01  1.5346e+00\nNdokwa West         1.1133e+00 -1.8225e-03  1.9959e-01  2.4960e+00\nNembe               9.7235e-01 -2.1141e-03  3.2487e-01  1.7096e+00\nNgala               2.9221e+00 -3.7801e-03  9.6907e-01  2.9722e+00\nNganzai             2.3810e+00 -3.7801e-03  4.1316e-01  3.7101e+00\nNgaski              3.2887e-01 -4.7770e-04  6.1195e-02  1.3314e+00\nNgor-Okpala        -2.4106e-02 -9.7851e-04  9.3721e-02 -7.5546e-02\nNguru               1.3002e+00 -2.1576e-03  3.3155e-01  2.2618e+00\nNingi               4.7867e-01 -8.9154e-04  8.5398e-02  1.6410e+00\nNjaba              -2.0712e-01 -3.3796e-04  5.2028e-02 -9.0656e-01\nNjikoka            -8.3590e-02 -1.5635e-05  2.0038e-03 -1.8670e+00\nNkanu East          5.8666e-01 -3.4005e-03  2.8843e-01  1.0987e+00\nNkanu West         -5.5924e-01 -2.7246e-04  4.1946e-02 -2.7292e+00\nNkwerre            -9.1090e-02 -1.0156e-03  1.3003e-01 -2.4980e-01\nNnewi North         6.6931e-01 -3.0976e-04  7.9687e-02  2.3721e+00\nNnewi South         1.1824e+00 -2.6123e-03  2.4979e-01  2.3709e+00\nNsit Atai           2.6397e+00 -4.8151e-03  9.2364e-01  2.7517e+00\nNsit Ibom           9.7205e-01 -8.6011e-04  1.6564e-01  2.3905e+00\nNsit Ubium          1.2747e+00 -1.2786e-03  1.2243e-01  3.6468e+00\nNsukka              2.6205e-01 -9.5615e-04  1.2243e-01  7.5168e-01\nNuman               6.5941e-01 -3.7801e-03  7.2586e-01  7.7841e-01\nNwangele           -1.6882e-01 -1.7999e-03  2.7668e-01 -3.1752e-01\nObafemi-Owode       2.1960e-01 -5.1016e-04  4.8886e-02  9.9552e-01\nObanliku            2.0676e-02 -2.3112e-06  5.9475e-04  8.4791e-01\nObi                -5.4635e-02 -1.4390e-04  2.7732e-02 -3.2721e-01\nObi.1               5.1207e-01 -3.9671e-03  7.6161e-01  5.9131e-01\nObi Ngwa            1.5951e+00 -2.6310e-03  2.2333e-01  3.3808e+00\nObia/Akpor          2.7348e-02 -1.5390e-06  1.6885e-04  2.1047e+00\nObokun              7.6568e-02 -9.3808e-05  7.9831e-03  8.5801e-01\nObot Akara          1.9514e+00 -4.0295e-03  4.4031e-01  2.9469e+00\nObowo               6.1685e-03 -1.1182e-05  1.7220e-03  1.4892e-01\nObubra             -2.6266e-01 -5.6270e-04  6.1700e-02 -1.0552e+00\nObudu               2.7949e-02 -1.9328e-05  2.4772e-03  5.6194e-01\nOdeda               3.9066e-02 -2.9647e-05  3.2526e-03  6.8551e-01\nOdigbo              1.2136e+00 -5.0203e-03  5.4803e-01  1.6462e+00\nOdo-Otin            6.9492e-02 -2.4479e-05  2.6855e-03  1.3414e+00\nOdogbolu           -4.4192e-02 -1.5838e-04  1.5182e-02 -3.5737e-01\nOdukpani            7.2179e-01 -1.0096e-03  7.0050e-02  2.7309e+00\nOffa                8.6626e-01 -1.2259e-03  9.4767e-01  8.9112e-01\nOfu                 1.9470e+00 -2.9474e-03  3.2242e-01  3.4342e+00\nOgba/Egbema/Ndoni  -2.4982e-01 -8.0420e-04  6.8390e-02 -9.5221e-01\nOgbadibo            7.9045e-02 -1.5544e-04  2.3934e-02  5.1193e-01\nOgbaru              2.3530e-01 -2.8348e-04  2.1680e-02  1.6000e+00\nOgbia               2.5932e-01 -3.9244e-04  6.0411e-02  1.0567e+00\nOgbomosho North    -3.8181e-02 -1.8395e-04  4.7328e-02 -1.7466e-01\nOgbomosho South    -8.0810e-02 -5.8026e-04  1.1178e-01 -2.3997e-01\nOgo Oluwa          -9.9349e-03 -8.7733e-05  1.3510e-02 -8.4721e-02\nOgoja              -1.7131e-02 -2.5625e-05  3.9461e-03 -2.7229e-01\nOgori/Magongo       5.5565e-01 -7.6475e-04  2.9535e-01  1.0238e+00\nOgu/Bolo            8.8861e-01 -3.7801e-03  5.7993e-01  1.1718e+00\nOgun waterside      9.9932e-02 -3.1211e-05  4.8062e-03  1.4419e+00\nOguta              -6.2668e-01 -1.7842e-03  1.7075e-01 -1.5123e+00\nOhafia              2.8484e-02 -5.8026e-04  1.1178e-01  8.6932e-02\nOhaji/Egbema        8.0730e-02 -1.5494e-04  1.6996e-02  6.2042e-01\nOhaozara            2.3287e-01 -2.9918e-04  3.8333e-02  1.1909e+00\nOhaukwu             3.2263e-01 -4.5003e-04  8.6704e-02  1.0972e+00\nOhimini             1.3578e+00 -1.4876e-03  2.8631e-01  2.5403e+00\nOji-River           5.6825e-02 -8.6083e-06  8.2529e-04  1.9783e+00\nOjo                -5.3922e-03 -2.1498e-06  4.1438e-04 -2.6478e-01\nOju                 4.1541e-01 -1.8212e-03  1.9945e-01  9.3424e-01\nOke-Ero             7.4437e-01 -1.5511e-03  1.6991e-01  1.8096e+00\nOkehi               1.0083e+00 -4.0202e-03  6.1662e-01  1.2891e+00\nOkene               5.6840e-01 -5.0074e-04  7.7074e-02  2.0492e+00\nOkigwe             -1.7680e-01 -1.4976e-03  1.4336e-01 -4.6300e-01\nOkitipupa           1.8579e+00 -3.5353e-03  5.4250e-01  2.5272e+00\nOkobo               1.9289e+00 -2.4531e-03  2.6847e-01  3.7274e+00\nOkpe                5.4856e-01 -3.0647e-04  3.3613e-02  2.9937e+00\nOkpokwu             6.9011e-01 -8.0881e-04  1.0358e-01  2.1468e+00\nOkrika              1.7906e+00 -2.2298e-03  3.4262e-01  3.0630e+00\nOla-oluwa           3.5085e-01 -2.0515e-03  3.9461e-01  5.6178e-01\nOlamabolo           1.0591e+00 -2.5132e-03  2.7504e-01  2.0244e+00\nOlorunda            1.1269e-02 -8.5160e-07  8.1645e-05  1.2472e+00\nOlorunsogo          4.3491e-02 -6.2294e-05  6.8340e-03  5.2684e-01\nOluyole             5.7479e-02 -4.9134e-04  4.7083e-02  2.6716e-01\nOmala               3.0737e+00 -7.4879e-03  9.5250e-01  3.1571e+00\nOmumma             -1.1518e-01 -4.1651e-04  8.0248e-02 -4.0511e-01\nOna-Ara            -7.4443e-02 -7.3393e-04  9.3994e-02 -2.4042e-01\nOndo East           1.3324e+00 -2.3823e-03  3.6600e-01  2.2064e+00\nOndo West           9.6663e-01 -2.6209e-03  2.8679e-01  1.8099e+00\nOnicha              3.3725e-01 -5.1984e-04  4.9812e-02  1.5134e+00\nOnitsha North       5.4278e-01 -2.3346e-03  2.5554e-01  1.0783e+00\nOnitsha South       3.1716e-01 -1.0863e-03  2.7924e-01  6.0225e-01\nOnna                1.3939e+00 -1.3186e-03  1.6878e-01  3.3960e+00\nOpobo/Nkoro         5.6166e-01 -2.6599e-04  5.1256e-02  2.4820e+00\nOredo               2.2784e-01 -1.6711e-04  4.2995e-02  1.0996e+00\nOrelope            -4.3267e-02 -4.3891e-05  6.7588e-03 -5.2576e-01\nOrhionmwon          1.1105e+00 -1.7489e-03  1.1100e-01  3.3383e+00\nOri Ire            -1.3045e-02 -1.2242e-03  1.1722e-01 -3.4526e-02\nOriade              8.1760e-02 -2.1118e-05  1.6155e-03  2.0347e+00\nOrlu                5.0803e-02 -2.1032e-04  2.6950e-02  3.1074e-01\nOrolu               1.4248e-01 -1.1609e-03  2.2350e-01  3.0384e-01\nOron                2.8545e-01 -4.8641e-05  7.4902e-03  3.2988e+00\nOrsu                3.6274e-02 -2.5055e-06  3.8583e-04  1.8468e+00\nOru East            5.8284e-02 -4.8349e-04  5.3019e-02  2.5522e-01\nOru West            2.0609e-02 -5.7192e-04  1.4709e-01  5.5228e-02\nOruk Anam           2.5565e+00 -6.5049e-03  7.0902e-01  3.0439e+00\nOrumba North        3.2638e-01 -5.1016e-04  7.8524e-02  1.1665e+00\nOrumba South        3.7339e-02 -1.9671e-05  2.5211e-03  7.4403e-01\nOse                 1.5205e+00 -3.4009e-03  3.7185e-01  2.4990e+00\nOshimili North     -8.4248e-01 -1.2640e-03  1.9440e-01 -1.9079e+00\nOshimili South     -3.5846e-01 -7.7334e-04  8.4780e-02 -1.2284e+00\nOshodi-Isolo        1.7385e+00 -3.7801e-03  5.7993e-01  2.2879e+00\nOsisioma Ngwa       1.0356e-01 -7.2763e-05  6.9755e-03  1.2408e+00\nOsogbo             -2.2601e-03 -1.7541e-05  1.9245e-03 -5.1119e-02\nOturkpo             9.6278e-01 -1.2341e-03  1.1817e-01  2.8043e+00\nOvia North East     1.7871e-01 -4.3058e-05  3.2937e-03  3.1147e+00\nOvia South West     3.4134e-01 -9.2957e-05  1.1913e-02  3.1282e+00\nOwan East           4.9038e-01 -2.9919e-04  4.6061e-02  2.2863e+00\nOwan West           1.3771e+00 -5.0075e-03  7.6729e-01  1.5779e+00\nOwerri-Municipal   -1.6865e-01 -2.5443e-03  9.8088e-01 -1.6772e-01\nOwerri North       -1.9260e-01 -1.9660e-04  2.5192e-02 -1.2122e+00\nOwerri West         4.0780e-02 -2.8842e-05  3.6964e-03  6.7122e-01\nOwo                 2.5804e-01 -6.5060e-04  7.1332e-02  9.6857e-01\nOye                 3.0744e-02 -6.3978e-04  9.8461e-02  1.0002e-01\nOyi                -7.8025e-02 -1.7314e-05  2.6662e-03 -1.5107e+00\nOyigbo             -7.3592e-01 -1.7097e-03  1.6363e-01 -1.8150e+00\nOyo East            4.1404e-02 -9.8515e-06  8.3844e-04  1.4302e+00\nOyo West            2.7063e-01 -8.6398e-04  9.4707e-02  8.8219e-01\nOyun                4.0118e-01 -1.0245e-03  1.1228e-01  1.2003e+00\nPaikoro             1.7287e-02 -1.7331e-04  1.4747e-02  1.4378e-01\nPankshin            2.4620e-01 -3.4159e-04  3.7464e-02  1.2738e+00\nPatani              2.3391e+00 -6.1690e-03  9.4416e-01  2.4136e+00\nPategi              1.7849e-01 -7.8168e-05  1.0018e-02  1.7842e+00\nPort-Harcourt       1.0475e+00 -1.7755e-03  3.4161e-01  1.7953e+00\nPotiskum            6.8581e-01 -2.2298e-03  5.7252e-01  9.0932e-01\nQua'an Pan          5.0546e-02 -5.4932e-05  7.0400e-03  6.0307e-01\nRabah               1.5725e-01 -2.2944e-03  2.5115e-01  3.1836e-01\nRafi               -1.6896e-01 -6.9303e-05  1.0672e-02 -1.6348e+00\nRano                3.2201e-01 -4.8929e-04  7.5314e-02  1.1751e+00\nRemo North         -1.0244e-01 -1.5425e-04  2.3750e-02 -6.6374e-01\nRijau               3.1351e-01 -6.0788e-04  6.6651e-02  1.2167e+00\nRimi               -3.9066e-02 -3.8713e-05  5.9615e-03 -5.0546e-01\nRimin Gado          1.6698e+00 -3.1728e-03  4.8706e-01  2.3972e+00\nRingim              1.8134e+00 -3.0847e-03  3.9413e-01  2.8935e+00\nRiyom              -9.4632e-04 -1.6483e-05  1.8084e-03 -2.1866e-02\nRogo               -3.9858e-02 -1.7632e-05  1.9344e-03 -9.0584e-01\nRoni                5.5438e-02 -4.6369e-06  7.1407e-04  2.0748e+00\nSabon-Gari          2.5757e-01 -2.2538e-04  4.3433e-02  1.2370e+00\nSabon Birni         1.9001e-01 -2.2492e-03  5.7750e-01  2.5300e-01\nSabuwa              9.2740e-01 -4.8803e-03  9.3608e-01  9.6358e-01\nSafana              5.1795e-01 -1.4514e-03  1.8574e-01  1.2052e+00\nSagbama             1.6783e+00 -3.5968e-03  3.0502e-01  3.0453e+00\nSakaba              2.2287e-01 -3.9830e-04  7.6742e-02  8.0595e-01\nSaki East          -2.2585e-03 -1.7473e-06  2.6908e-04 -1.3757e-01\nSaki West          -6.9997e-03 -2.3239e-05  5.9800e-03 -9.0216e-02\nSandamu             4.5343e-03 -3.6388e-05  4.6634e-03  6.6931e-02\nSanga               1.6947e-02 -4.7812e-04  4.5817e-02  8.1409e-02\nSapele              1.7234e+00 -2.7681e-03  5.3206e-01  2.3665e+00\nSardauna            2.1319e-01 -1.1804e-03  4.5569e-01  3.1757e-01\nShagamu            -3.5880e-01 -6.4981e-04  8.3229e-02 -1.2414e+00\nShagari            -1.1314e-01 -3.0607e-05  4.7132e-03 -1.6475e+00\nShanga              4.7772e-01 -3.5775e-03  3.4176e-01  8.2329e-01\nShani              -6.4139e-02 -3.7801e-03  3.6104e-01 -1.0045e-01\nShanono             3.3515e-01 -1.9762e-04  3.0427e-02  1.9225e+00\nShelleng           -3.2472e-01 -2.1259e-04  2.3319e-02 -2.1251e+00\nShendam             7.3009e-02 -3.2032e-04  3.5131e-02  3.9123e-01\nShinkafi            2.2148e-01 -3.5985e-04  9.2567e-02  7.2915e-01\nShira               3.3932e-01 -3.8970e-04  5.9989e-02  1.3870e+00\nShiroro            -4.5155e-01 -4.9417e-04  5.4190e-02 -1.9376e+00\nShomgom             7.3156e-02 -2.2152e-04  3.4107e-02  3.9732e-01\nShomolu             8.8786e-01 -6.1551e-04  1.1856e-01  2.5803e+00\nSilame             -4.5186e-01 -3.4958e-04  6.7358e-02 -1.7397e+00\nSoba               -2.5539e-02 -1.5925e-05  1.5268e-03 -6.5319e-01\nSokoto North       -1.1007e-02 -2.1091e-03  5.4158e-01 -1.2091e-02\nSokoto South        7.6471e-02 -4.1651e-04  8.0248e-02  2.7142e-01\nSong                3.0578e-01 -3.4958e-04  3.8340e-02  1.5634e+00\nSouthern Ijaw       2.0259e+00 -5.0431e-03  5.5050e-01  2.7372e+00\nSule-Tankarkar      6.0234e-01 -1.4858e-03  1.9015e-01  1.3847e+00\nSuleja              2.2065e-02 -1.2978e-04  2.5012e-02  1.4034e-01\nSumaila             2.6625e-01 -2.8893e-04  5.5676e-02  1.1296e+00\nSuru                1.9635e+00 -5.2677e-03  8.0694e-01  2.1917e+00\nSurulere            1.6014e+00 -1.9935e-03  2.5499e-01  3.1751e+00\nSurulere.1          3.6514e-02 -4.7632e-04  3.3066e-02  2.0342e-01\nTafa               -5.3152e-01 -1.6072e-03  2.4711e-01 -1.0660e+00\nTafawa-Balewa       5.8116e-01 -1.1159e-03  8.5267e-02  1.9941e+00\nTai                -1.0529e+00 -2.7681e-03  4.2510e-01 -1.6107e+00\nTakai               6.5119e-01 -6.4168e-04  8.2187e-02  2.2737e+00\nTakum               2.5074e-01 -3.3796e-04  6.5120e-02  9.8391e-01\nTalata Mafara      -2.8200e-02 -2.7759e-06  5.3505e-04 -1.2190e+00\nTambuwal            3.7019e-01 -1.0720e-03  9.1141e-02  1.2298e+00\nTangaza             9.6314e-01 -2.3190e-03  2.9652e-01  1.7730e+00\nTarauni             7.3059e-01 -2.1304e-03  4.0976e-01  1.1446e+00\nTarka              -3.5172e-01 -5.0703e-04  9.7679e-02 -1.1237e+00\nTarmua              1.0417e+00 -1.4223e-03  2.1872e-01  2.2304e+00\nTaura               1.5286e+00 -1.8010e-03  2.3041e-01  3.1883e+00\nTofa                2.0240e+00 -3.5929e-03  5.5132e-01  2.7307e+00\nToro                4.3752e-01 -6.4784e-04  4.9527e-02  1.9689e+00\nToto                1.4611e-01 -3.3687e-05  4.3174e-03  2.2241e+00\nToungo              3.7607e-02 -7.4280e-04  1.9100e-01  8.7748e-02\nTsafe               2.8227e-01 -5.5896e-04  1.0768e-01  8.6192e-01\nTsanyawa            3.4756e-01 -2.2827e-04  2.5038e-02  2.1979e+00\nTudun Wada         -2.9239e-01 -2.0933e-04  1.7812e-02 -2.1893e+00\nTureta             -3.1429e-01 -1.7489e-03  1.9154e-01 -7.1414e-01\nUdenu               4.0430e-01 -2.8841e-03  4.4286e-01  6.1186e-01\nUdi                 8.9711e-01 -2.0416e-03  1.7340e-01  2.1593e+00\nUdu                 3.0464e-02 -5.6386e-07  1.0868e-04  2.9222e+00\nUdung Uko           2.5972e+00 -5.1306e-03  1.3135e+00  2.2707e+00\nUghelli North      -1.2183e-01 -1.1282e-05  8.6304e-04 -4.1468e+00\nUghelli South       1.1491e+00 -1.1804e-03  1.2935e-01  3.1982e+00\nUgwunagbo           1.1146e+00 -1.8954e-03  2.4247e-01  2.2674e+00\nUhunmwonde          4.8495e-01 -2.1259e-04  2.7241e-02  2.9395e+00\nUkanafun            1.8329e+00 -5.9385e-03  9.0908e-01  1.9287e+00\nUkum                8.6618e-02 -3.0939e-04  5.9616e-02  3.5602e-01\nUkwa East           1.7692e+00 -2.9718e-03  3.2507e-01  3.1082e+00\nUkwa West           2.6860e-01 -1.0478e-03  1.3415e-01  7.3622e-01\nUkwuani             1.6223e+00 -4.2627e-03  8.1813e-01  1.7983e+00\nUmu-Nneochi         3.7350e-02 -4.9397e-05  5.4192e-03  5.0804e-01\nUmuahia North      -1.0484e-01 -4.9134e-04  5.3880e-02 -4.4953e-01\nUmuahia South       1.4881e-02 -4.4116e-05  6.7934e-03  1.8108e-01\nUngogo              1.0541e+00 -2.1854e-03  1.8559e-01  2.4519e+00\nUnuimo             -4.7249e-02 -1.9671e-05  2.1581e-03 -1.0166e+00\nUruan               2.9559e+00 -6.5831e-03  8.3816e-01  3.2359e+00\nUrue-Offong/Oruko   2.5175e+00 -3.6920e-03  5.6647e-01  3.3498e+00\nUshongo             3.8617e-02 -1.3823e-04  1.7714e-02  2.9118e-01\nUssa                1.2048e-01 -1.1395e-04  2.9319e-02  7.0427e-01\nUvwie               7.4623e-01 -3.9671e-03  6.0850e-01  9.6171e-01\nUyo                 1.3977e+00 -1.2100e-03  9.2450e-02  4.6008e+00\nUzo-Uwani          -1.2346e-01 -2.9852e-03  2.8535e-01 -2.2554e-01\nVandeikya          -6.5536e-02 -5.6121e-05  8.6420e-03 -7.0437e-01\nWamako              1.3334e-01 -3.5368e-04  3.0091e-02  7.7074e-01\nWamba              -8.7976e-03 -1.5236e-04  2.3460e-02 -5.6444e-02\nWarawa              2.1558e-01 -2.2626e-04  2.4818e-02  1.3699e+00\nWarji               1.1740e+00 -1.5762e-03  3.0333e-01  2.1345e+00\nWarri North         2.0708e+00 -4.8618e-03  4.1177e-01  3.2347e+00\nWarri South         1.0187e+00 -7.4965e-04  9.6007e-02  3.2901e+00\nWarri South West    1.8980e+00 -7.2609e-03  1.1100e+00  1.8084e+00\nWasagu/Danko       -4.5288e-03 -9.3786e-06  1.0289e-03 -1.4089e-01\nWase                3.7907e-02 -1.7980e-04  2.7684e-02  2.2890e-01\nWudil               3.5902e-01 -3.0655e-04  3.3622e-02  1.9596e+00\nWukari              3.9924e-02 -2.2284e-05  2.4447e-03  8.0791e-01\nWurno               8.2289e-03 -5.4434e-06  1.0492e-03  2.5421e-01\nWushishi            1.7360e-02 -4.4144e-04  4.8410e-02  8.0906e-02\nYabo                3.6528e-01 -2.0214e-03  2.5854e-01  7.2236e-01\nYagba East          7.6050e-01 -3.6418e-03  3.9810e-01  1.2111e+00\nYagba West          1.0868e+00 -2.5700e-03  2.8123e-01  2.0542e+00\nYakurr              7.6761e-03 -1.4552e-05  2.2410e-03  1.6246e-01\nYala                5.5810e-02 -3.5400e-05  3.3938e-03  9.5862e-01\nYamaltu/Deba        1.0418e-01 -6.4866e-04  7.1119e-02  3.9309e-01\nYankwashi           2.0768e-01 -1.1711e-03  1.8013e-01  4.9208e-01\nYauri               7.2208e-01 -9.4071e-04  2.4185e-01  1.4702e+00\nYenegoa             3.4762e-02 -1.1287e-03  1.4450e-01  9.4416e-02\nYola North          1.2893e-01 -1.7419e-03  6.7205e-01  1.5940e-01\nYola South         -8.6569e-01 -9.4071e-04  1.4473e-01 -2.2730e+00\nYorro               4.1774e-02 -3.7412e-04  4.7931e-02  1.9252e-01\nYunusari            2.3026e+00 -3.7801e-03  7.2586e-01  2.7071e+00\nYusufari            1.2267e+00 -1.6899e-03  2.5981e-01  2.4099e+00\nZaki                1.0917e+00 -1.6357e-03  1.7916e-01  2.5831e+00\nZango               4.9607e-02 -7.7808e-04  1.4986e-01  1.3016e-01\nZango-Kataf        -1.6368e-01 -2.8221e-03  3.6068e-01 -2.6785e-01\nZaria               4.2926e-01 -3.8136e-04  7.3478e-02  1.5850e+00\nZing                5.6379e-02 -1.4705e-05  5.6835e-03  7.4804e-01\nZurmi               4.8254e-02 -9.6631e-06  9.2642e-04  1.5857e+00\nZuru                1.5151e-02 -2.0515e-05  3.9542e-03  2.4127e-01\n                   Pr.z....E.Ii..\nAba North                  0.0784\nAba South                  0.1916\nAbadam                     0.0030\nAbaji                      0.5278\nAbak                       0.0013\nAbakaliki                  0.0995\nAbeokuta North             0.2046\nAbeokuta South             0.5341\nAbi                        0.6951\nAboh-Mbaise                0.8823\nAbua/Odual                 0.9760\nAbuja Municipal            0.7350\nAdavi                      0.0739\nAdo                        0.8805\nAdo-Odo/Ota                0.3220\nAdo Ekiti                  0.8068\nAfijio                     0.5664\nAfikpo North               0.9338\nAfikpo South               0.8503\nAgaie                      0.8193\nAgatu                      0.0031\nAgege                      0.1735\nAguata                     0.0725\nAgwara                     0.2076\nAhiazu-Mbaise              0.5393\nAhoada East                0.1699\nAhoada West                0.5424\nAiyedade                   0.9438\nAiyedire                   0.5110\nAiyekire (Gbonyin)         0.5695\nAjaokuta                   0.0551\nAjeromi-Ifelodun           0.0318\nAjingi                     0.0027\nAkamkpa                    0.1406\nAkinyele                   0.3087\nAkko                       0.0372\nAkoko-Edo                  0.0024\nAkoko North East           0.0800\nAkoko North West           0.9892\nAkoko South East           0.0381\nAkoko South West           0.0553\nAkpabuyo                   0.2736\nAkuku Toru                 0.7142\nAkure North                0.6939\nAkure South                0.0857\nAkwanga                    0.4092\nAlbasu                     0.0121\nAleiro                     0.6399\nAlimosho                   0.0465\nAlkaleri                   0.7471\nAmuwo-Odofin               0.0029\nAnambra East               0.3808\nAnambra West               0.6955\nAnaocha                    0.0148\nAndoni                     0.5823\nAninri                     0.2763\nAniocha North              0.5327\nAniocha South              0.1092\nAnka                       0.7273\nAnkpa                      0.0001\nApa                        0.0000\nApapa                      0.0067\nArdo-Kola                  0.8755\nArewa-Dandi                0.0249\nArgungu                    0.7242\nArochukwu                  0.1201\nAsa                        0.7055\nAsari-Toru                 0.6477\nAskira/Uba                 0.0867\nAtakumosa East             0.3096\nAtakumosa West             0.3049\nAtiba                      0.3571\nAtigbo                     0.1904\nAugie                      0.1619\nAuyo                       0.0035\nAwe                        0.4061\nAwgu                       0.0713\nAwka North                 0.7052\nAwka South                 0.1633\nAyamelum                   0.0308\nBabura                     0.3493\nBadagry                    0.7688\nBade                       0.0367\nBagudo                     0.0056\nBagwai                     0.0129\nBakassi                       NaN\nBakori                     0.1901\nBakura                     0.7345\nBalanga                    0.5333\nBali                       0.7383\nBama                       0.0006\nBarikin Ladi               0.9201\nBaruten                    0.8327\nBassa                      0.0045\nBassa.1                    0.3145\nBatagarawa                 0.7114\nBatsari                    0.5757\nBauchi                     0.2337\nBaure                      0.0649\nBayo                       0.3317\nBebeji                     0.2820\nBekwara                    0.6694\nBende                      0.6003\nBiase                      0.3696\nBichi                      0.0056\nBida                       0.7402\nBilliri                    0.7270\nBindawa                    0.1579\nBinji                      0.2507\nBiriniwa                   0.0034\nBirni Kudu                 0.0052\nBirnin-Gwari               0.0385\nBirnin Kebbi               0.1616\nBirnin Magaji              0.1657\nBiu                        0.0339\nBodinga                    0.1891\nBogoro                     0.2089\nBoki                       0.6338\nBokkos                     0.8661\nBoluwaduro                 0.5855\nBomadi                     0.0006\nBonny                      0.6179\nBorgu                      0.1651\nBoripe                     0.4401\nBosso                      0.5366\nBrass                      0.0210\nBuji                       0.1057\nBukkuyum                   0.9476\nBungudu                    0.2594\nBunkure                    0.1379\nBunza                      0.0068\nBursari                    0.0019\nBuruku                     0.7801\nBurutu                     0.0001\nBwari                      0.4948\nCalabar-Municipal          0.0731\nCalabar South              0.3986\nChanchaga                  0.5025\nCharanchi                  0.4711\nChibok                     0.0151\nChikun                     0.3127\nDala                       0.0375\nDamaturu                   0.0126\nDamban                     0.6557\nDambatta                   0.0164\nDamboa                     0.0000\nDan Musa                   0.0658\nDandi                      0.1423\nDandume                    0.4217\nDange-Shuni                0.7467\nDanja                      0.7821\nDarazo                     0.6562\nDass                       0.2456\nDaura                      0.7872\nDawakin Kudu               0.1413\nDawakin Tofa               0.0024\nDegema                     0.0385\nDekina                     0.0005\nDemsa                      0.4042\nDikwa                      0.0000\nDoguwa                     0.1631\nDoma                       0.0074\nDonga                      0.6056\nDukku                      0.1000\nDunukofia                  0.1062\nDutse                      0.0037\nDutsi                      0.5173\nDutsin-Ma                  0.1084\nEastern Obolo              0.0230\nEbonyi                     0.0385\nEdati                      0.9558\nEde North                  0.7431\nEde South                  0.8273\nEdu                        0.2702\nEfon                       0.6377\nEgbado North               0.1274\nEgbado South               0.5254\nEgbeda                     0.4785\nEgbedore                   0.8724\nEgor                       0.3851\nEhime-Mbano                0.3166\nEjigbo                     0.6156\nEkeremor                   0.0033\nEket                       0.0121\nEkiti                      0.0685\nEkiti East                 0.1181\nEkiti South West           0.2885\nEkiti West                 0.4374\nEkwusigo                   0.0478\nEleme                      0.1072\nEmohua                     0.2221\nEmure                      0.7311\nEnugu East                 0.1804\nEnugu North                0.0323\nEnugu South                0.1806\nEpe                        0.2074\nEsan Central               0.0518\nEsan North East            0.0062\nEsan South East            0.0197\nEsan West                  0.0125\nEse-Odo                    0.0068\nEsit - Eket                0.0016\nEssien Udim                0.0001\nEtche                      0.1864\nEthiope East               0.0904\nEthiope West               0.0069\nEti-Osa                    0.2381\nEtim Ekpo                  0.0000\nEtinan                     0.0187\nEtsako Central             0.0116\nEtsako East                0.0014\nEtsako West                0.0133\nEtung                      0.8168\nEwekoro                    0.2090\nEzeagu                     0.1124\nEzinihitte                 0.4786\nEzza North                 0.1076\nEzza South                 0.1348\nFagge                      0.2669\nFakai                      0.1066\nFaskari                    0.9375\nFika                       0.8410\nFufore                     0.5290\nFunakaye                   0.0414\nFune                       0.0024\nFuntua                     0.7789\nGabasawa                   0.0271\nGada                       0.0410\nGagarawa                   0.0447\nGamawa                     0.4080\nGanjuwa                    0.6823\nGanye                      0.5309\nGarki                      0.0009\nGarko                      0.2668\nGarum Mallam               0.1045\nGashaka                    0.9299\nGassol                     0.9530\nGaya                       0.1025\nGbako                      0.6258\nGboko                      0.8026\nGeidam                     0.0017\nGezawa                     0.0515\nGiade                      0.2670\nGirei                      0.1571\nGiwa                       0.0154\nGokana                     0.4078\nGombe                      0.0860\nGombi                      0.0631\nGoronyo                    0.8583\nGubio                      0.0008\nGudu                       0.1285\nGujba                      0.0082\nGulani                     0.6316\nGuma                       0.3780\nGumel                      0.0871\nGummi                      0.6444\nGurara                     0.6035\nGuri                       0.0102\nGusau                      0.3102\nGuyuk                      0.1897\nGuzamala                   0.0000\nGwadabawa                  0.1193\nGwagwalada                 0.3468\nGwale                      0.1798\nGwandu                     0.7431\nGwaram                     0.0740\nGwarzo                     0.1487\nGwer East                  0.5725\nGwer West                  0.0312\nGwiwa                      0.3020\nGwoza                      0.0006\nHadejia                    0.0500\nHawul                      0.0508\nHong                       0.0869\nIbadan North               0.7884\nIbadan North East          0.5535\nIbadan North West          0.1728\nIbadan South East          0.7091\nIbadan South West          0.2604\nIbaji                      0.0958\nIbarapa Central            0.4538\nIbarapa East               0.2606\nIbarapa North              0.1404\nIbeju/Lekki                0.3002\nIbeno                      0.0006\nIbesikpo Asutan            0.0018\nIbi                        0.8290\nIbiono Ibom                0.0215\nIdah                       0.0196\nIdanre                     0.0188\nIdeato North               0.3792\nIdeato South               0.7363\nIdemili North              0.1508\nIdemili South              0.0137\nIdo                        0.1745\nIdo-Osi                    0.3713\nIfako-Ijaye                0.0506\nIfe Central                0.6152\nIfe East                   0.3077\nIfe North                  0.4696\nIfe South                  0.0643\nIfedayo                    0.2018\nIfedore                    0.1522\nIfelodun                   0.1259\nIfelodun.1                 0.6673\nIfo                        0.0759\nIgabi                      0.1695\nIgalamela-Odolu            0.4779\nIgbo-Etiti                 0.2261\nIgbo-Eze North             0.9946\nIgbo-Eze South             0.1820\nIgueben                    0.0082\nIhiala                     0.2033\nIhitte/Uboma               0.5026\nIjebu East                 0.0813\nIjebu North                0.8731\nIjebu North East           0.5060\nIjebu Ode                  0.5985\nIjero                      0.5513\nIjumu                      0.0134\nIka                        0.0035\nIka North East             0.0029\nIka South                  0.8393\nIkara                      0.3055\nIkeduru                    0.7506\nIkeja                      0.0045\nIkenne                     0.9710\nIkere                      0.4928\nIkole                      0.2652\nIkom                       0.6406\nIkono                      0.0007\nIkorodu                    0.4321\nIkot Abasi                 0.0026\nIkot Ekpene                0.0119\nIkpoba-Okha                0.0161\nIkwerre                    0.9867\nIkwo                       0.5954\nIkwuano                    0.2483\nIla                        0.2867\nIlaje                      0.0109\nIle-Oluji-Okeigbo          0.1257\nIlejemeji                  0.7143\nIlesha East                0.5602\nIlesha West                0.6558\nIllela                     0.3127\nIlorin East                0.7048\nIlorin South               0.8079\nIlorin West                0.9225\nImeko-Afon                 0.9865\nIngawa                     0.1343\nIni                        0.1702\nIpokia                     0.8293\nIrele                      0.0087\nIrepo                      0.9247\nIrepodun                   0.2341\nIrepodun.1                 0.6729\nIrepodun/Ifelodun          0.7992\nIrewole                    0.8623\nIsa                        0.8559\nIse/Orun                   0.2930\nIseyin                     0.3294\nIshielu                    0.2606\nIsi-Uzo                    0.1267\nIsiala-Ngwa North          0.4260\nIsiala-Ngwa South          0.1716\nIsiala Mbano               0.5971\nIsin                       0.1194\nIsiukwuato                 0.9539\nIsokan                     0.3393\nIsoko North                0.1334\nIsoko South                0.0080\nIsu                        0.3197\nItas/Gadau                 0.0179\nItesiwaju                  0.5558\nItu                        0.0078\nIvo                        0.2839\nIwajowa                    0.0993\nIwo                        0.5407\nIzzi                       0.2565\nJaba                       0.6189\nJada                       0.1960\nJahun                      0.0004\nJakusko                    0.0496\nJalingo                    0.8340\nJama'are                   0.2658\nJega                       0.2218\nJema'a                     0.8323\nJere                       0.0008\nJibia                      0.8850\nJos East                   0.3727\nJos North                  0.5390\nJos South                  0.4068\nKabba/Bunu                 0.0236\nKabo                       0.0399\nKachia                     0.0645\nKaduna North               0.0515\nKaduna South               0.0005\nKafin Hausa                0.0093\nKafur                      0.3063\nKaga                       0.0014\nKagarko                    0.7396\nKaiama                     0.6727\nKaita                      0.7205\nKajola                     0.1289\nKajuru                     0.6606\nKala/Balge                 0.0030\nKalgo                      0.5280\nKaltungo                   0.1311\nKanam                      0.2210\nKankara                    0.0295\nKanke                      0.1557\nKankia                     0.0365\nKano Municipal             0.0555\nKarasuwa                   0.0139\nKaraye                     0.1482\nKarim-Lamido               0.5131\nKaru                       0.0532\nKatagum                    0.7682\nKatcha                     0.7168\nKatsina                    0.9574\nKatsina-Ala                0.1779\nKaugama                    0.0013\nKaura                      0.2480\nKaura Namoda               0.5295\nKauru                      0.3775\nKazaure                    0.1577\nKeana                      0.1339\nKebbe                      0.2588\nKeffi                      0.8259\nKhana                      0.0299\nKibiya                     0.3353\nKirfi                      0.5709\nKiri Kasamma               0.0186\nKiru                       0.1995\nKiyawa                     0.0075\nKogi                       0.5335\nKoko/Besse                 0.0997\nKokona                     0.9013\nKolokuma/Opokuma           0.0082\nKonduga                    0.0000\nKonshisha                  0.8831\nKontagora                  0.1579\nKosofe                     0.0585\nKubau                      0.3361\nKudan                      0.8991\nKuje                       0.2181\nKukawa                     0.0030\nKumbotso                   0.0072\nKunchi                     0.1161\nKura                       0.2270\nKurfi                      0.3062\nKurmi                      0.4900\nKusada                     0.1475\nKwali                      0.1976\nKwami                      0.0055\nKwande                     0.7769\nKware                      0.8079\nKwaya Kusar                0.0099\nLafia                      0.3684\nLagelu                     0.5774\nLagos Island               0.0046\nLagos Mainland             0.0276\nLamurde                    0.8306\nLangtang North             0.3567\nLangtang South             0.3907\nLapai                      0.3000\nLau                        0.1035\nLavun                      0.2073\nLere                       0.0838\nLogo                       0.5120\nLokoja                     0.0208\nMachina                    0.0171\nMadagali                   0.0176\nMadobi                     0.0336\nMafa                       0.0002\nMagama                     0.2418\nMagumeri                   0.0000\nMai'adua                   0.4382\nMaiduguri                  0.1087\nMaigatari                  0.0397\nMaiha                      0.8819\nMaiyama                    0.0038\nMakoda                     0.0573\nMakurdi                    0.0240\nMalam Madori               0.0748\nMalumfashi                 0.0242\nMangu                      0.2733\nMani                       0.5529\nMaradun                    0.0721\nMariga                     0.1537\nMarkafi                    0.9683\nMarte                      0.0006\nMaru                       0.7511\nMashegu                    0.7112\nMashi                      0.8700\nMatazu                     0.0928\nMayo-Belwa                 0.5623\nMbaitoli                   0.6223\nMbo                        0.0008\nMichika                    0.7492\nMiga                       0.0031\nMikang                     0.3731\nMinjibir                   0.0088\nMisau                      0.9096\nMkpat Enin                 0.0001\nMoba                       0.2966\nMobbar                     0.0001\nMokwa                      0.5298\nMonguno                    0.0001\nMopa-Muro                  0.0675\nMoro                       0.7420\nMubi North                 0.5320\nMubi South                 0.2568\nMusawa                     0.0382\nMushin                     0.0030\nMuya                       0.1407\nNafada                     0.0899\nNangere                    0.3047\nNasarawa                   0.0260\nNasarawa.1                 0.0226\nNasarawa-Eggon             0.9993\nNdokwa East                0.1249\nNdokwa West                0.0126\nNembe                      0.0873\nNgala                      0.0030\nNganzai                    0.0002\nNgaski                     0.1831\nNgor-Okpala                0.9398\nNguru                      0.0237\nNingi                      0.1008\nNjaba                      0.3646\nNjikoka                    0.0619\nNkanu East                 0.2719\nNkanu West                 0.0063\nNkwerre                    0.8027\nNnewi North                0.0177\nNnewi South                0.0177\nNsit Atai                  0.0059\nNsit Ibom                  0.0168\nNsit Ubium                 0.0003\nNsukka                     0.4522\nNuman                      0.4363\nNwangele                   0.7509\nObafemi-Owode              0.3195\nObanliku                   0.3965\nObi                        0.7435\nObi.1                      0.5543\nObi Ngwa                   0.0007\nObia/Akpor                 0.0353\nObokun                     0.3909\nObot Akara                 0.0032\nObowo                      0.8816\nObubra                     0.2913\nObudu                      0.5742\nOdeda                      0.4930\nOdigbo                     0.0997\nOdo-Otin                   0.1798\nOdogbolu                   0.7208\nOdukpani                   0.0063\nOffa                       0.3729\nOfu                        0.0006\nOgba/Egbema/Ndoni          0.3410\nOgbadibo                   0.6087\nOgbaru                     0.1096\nOgbia                      0.2907\nOgbomosho North            0.8613\nOgbomosho South            0.8104\nOgo Oluwa                  0.9325\nOgoja                      0.7854\nOgori/Magongo              0.3059\nOgu/Bolo                   0.2413\nOgun waterside             0.1493\nOguta                      0.1305\nOhafia                     0.9307\nOhaji/Egbema               0.5350\nOhaozara                   0.2337\nOhaukwu                    0.2726\nOhimini                    0.0111\nOji-River                  0.0479\nOjo                        0.7912\nOju                        0.3502\nOke-Ero                    0.0704\nOkehi                      0.1973\nOkene                      0.0404\nOkigwe                     0.6434\nOkitipupa                  0.0115\nOkobo                      0.0002\nOkpe                       0.0028\nOkpokwu                    0.0318\nOkrika                     0.0022\nOla-oluwa                  0.5743\nOlamabolo                  0.0429\nOlorunda                   0.2123\nOlorunsogo                 0.5983\nOluyole                    0.7893\nOmala                      0.0016\nOmumma                     0.6854\nOna-Ara                    0.8100\nOndo East                  0.0274\nOndo West                  0.0703\nOnicha                     0.1302\nOnitsha North              0.2809\nOnitsha South              0.5470\nOnna                       0.0007\nOpobo/Nkoro                0.0131\nOredo                      0.2715\nOrelope                    0.5991\nOrhionmwon                 0.0008\nOri Ire                    0.9725\nOriade                     0.0419\nOrlu                       0.7560\nOrolu                      0.7612\nOron                       0.0010\nOrsu                       0.0648\nOru East                   0.7985\nOru West                   0.9560\nOruk Anam                  0.0023\nOrumba North               0.2434\nOrumba South               0.4569\nOse                        0.0125\nOshimili North             0.0564\nOshimili South             0.2193\nOshodi-Isolo               0.0221\nOsisioma Ngwa              0.2147\nOsogbo                     0.9592\nOturkpo                    0.0050\nOvia North East            0.0018\nOvia South West            0.0018\nOwan East                  0.0222\nOwan West                  0.1146\nOwerri-Municipal           0.8668\nOwerri North               0.2254\nOwerri West                0.5021\nOwo                        0.3328\nOye                        0.9203\nOyi                        0.1309\nOyigbo                     0.0695\nOyo East                   0.1526\nOyo West                   0.3777\nOyun                       0.2300\nPaikoro                    0.8857\nPankshin                   0.2027\nPatani                     0.0158\nPategi                     0.0744\nPort-Harcourt              0.0726\nPotiskum                   0.3632\nQua'an Pan                 0.5465\nRabah                      0.7502\nRafi                       0.1021\nRano                       0.2399\nRemo North                 0.5069\nRijau                      0.2237\nRimi                       0.6132\nRimin Gado                 0.0165\nRingim                     0.0038\nRiyom                      0.9826\nRogo                       0.3650\nRoni                       0.0380\nSabon-Gari                 0.2161\nSabon Birni                0.8003\nSabuwa                     0.3353\nSafana                     0.2281\nSagbama                    0.0023\nSakaba                     0.4203\nSaki East                  0.8906\nSaki West                  0.9281\nSandamu                    0.9466\nSanga                      0.9351\nSapele                     0.0180\nSardauna                   0.7508\nShagamu                    0.2144\nShagari                    0.0995\nShanga                     0.4103\nShani                      0.9200\nShanono                    0.0545\nShelleng                   0.0336\nShendam                    0.6956\nShinkafi                   0.4659\nShira                      0.1654\nShiroro                    0.0527\nShomgom                    0.6911\nShomolu                    0.0099\nSilame                     0.0819\nSoba                       0.5136\nSokoto North               0.9904\nSokoto South               0.7861\nSong                       0.1180\nSouthern Ijaw              0.0062\nSule-Tankarkar             0.1661\nSuleja                     0.8884\nSumaila                    0.2586\nSuru                       0.0284\nSurulere                   0.0015\nSurulere.1                 0.8388\nTafa                       0.2864\nTafawa-Balewa              0.0461\nTai                        0.1073\nTakai                      0.0230\nTakum                      0.3252\nTalata Mafara              0.2228\nTambuwal                   0.2188\nTangaza                    0.0762\nTarauni                    0.2524\nTarka                      0.2611\nTarmua                     0.0257\nTaura                      0.0014\nTofa                       0.0063\nToro                       0.0490\nToto                       0.0261\nToungo                     0.9301\nTsafe                      0.3887\nTsanyawa                   0.0280\nTudun Wada                 0.0286\nTureta                     0.4751\nUdenu                      0.5406\nUdi                        0.0308\nUdu                        0.0035\nUdung Uko                  0.0232\nUghelli North              0.0000\nUghelli South              0.0014\nUgwunagbo                  0.0234\nUhunmwonde                 0.0033\nUkanafun                   0.0538\nUkum                       0.7218\nUkwa East                  0.0019\nUkwa West                  0.4616\nUkwuani                    0.0721\nUmu-Nneochi                0.6114\nUmuahia North              0.6531\nUmuahia South              0.8563\nUngogo                     0.0142\nUnuimo                     0.3093\nUruan                      0.0012\nUrue-Offong/Oruko          0.0008\nUshongo                    0.7709\nUssa                       0.4813\nUvwie                      0.3362\nUyo                        0.0000\nUzo-Uwani                  0.8216\nVandeikya                  0.4812\nWamako                     0.4409\nWamba                      0.9550\nWarawa                     0.1707\nWarji                      0.0328\nWarri North                0.0012\nWarri South                0.0010\nWarri South West           0.0705\nWasagu/Danko               0.8880\nWase                       0.8189\nWudil                      0.0500\nWukari                     0.4191\nWurno                      0.7993\nWushishi                   0.9355\nYabo                       0.4701\nYagba East                 0.2259\nYagba West                 0.0400\nYakurr                     0.8709\nYala                       0.3378\nYamaltu/Deba               0.6943\nYankwashi                  0.6227\nYauri                      0.1415\nYenegoa                    0.9248\nYola North                 0.8734\nYola South                 0.0230\nYorro                      0.8473\nYunusari                   0.0068\nYusufari                   0.0160\nZaki                       0.0098\nZango                      0.8964\nZango-Kataf                0.7888\nZaria                      0.1130\nZing                       0.4544\nZurmi                      0.1128\nZuru                       0.8093\n\n\n\nMapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto nga_wp SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called nga_wp.localMI.\n\nnga_wp.localMI <- cbind(nga_wp,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\nMapping local Moran’s I values and p values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values and p values by using the code chunks below.\nThe code chunk below will plot both the local Moran’s I values map and its corresponding p-values map next to each other for effective interpretation.\n\nlocalMI.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          palette = \"RdBu\",\n          title = \"Local moran statistics\") +\n  tm_borders(alpha = 0.5)+\n  tm_layout(main.title = \"Local Moran Statistics\", \n            main.title.size = 1)\n\npvalue.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"Local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)+\n  tm_layout(main.title = \"Local Moran's I p-value\", \n            main.title.size = 1)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\nThe north-eastern region and some part of the central-south region are clusters (as indicated by the dark blue regions in the left graph), which are statistically significant (as indicated by the darker shade of blue on the right graph). We will plot the LISA cluster map next to analyse further.\n\n\n\n\n6.4 LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\nPlotting Moran scatterplot\nmoran.plot() of spdep package is used to plot the Moran scatterplot of non-functional water rate. The Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\n\nnci <- moran.plot(nga_wp$pct_nonfunctional, rswm_q,\n                  labels=as.character(nga_wp$shapeName), \n                  xlab=\"Non-functional Water Point Rate\", \n                  ylab=\"Spatially Lag Non-functional Water Point Rate\",\n                  zero.policy = TRUE)\n\n\n\n\n\n\nPlotting Moran scatterplot with standardised variable\nscale() is used to standardise the variable i.e. subtract by mean and then divide by standard deviation. Note that as.vector() is added at the end to make sure that we get a vector, that maps neatly into our dataframe.\n\nnga_wp$Z.pct_nonfunctional <- scale(nga_wp$pct_nonfunctional) %>% as.vector \n\nNext, we will plot the Moran scatterplot again using the standardised variable.\n\nnci2 <- moran.plot(nga_wp$Z.pct_nonfunctional, rswm_q,\n                   labels=as.character(nga_wp$shapeName),\n                   xlab=\"Non-functional Water Point Rate\", \n                  ylab=\"Spatially Lag z-Non-functional Water Point Rate\",\n                  zero.policy = TRUE)\n\n\n\n\n\n\n\nPreparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nDV: Derive the spatially lagged variable of interest and centers the spatially lagged variable around its mean.\nLM_I: Center the local Moran's around the mean.\nsignif: Set a statistical significance level for the local Moran.\nDefine the low-low (1), low-high (2), high-low (3) and high-high (4) categories, and lastly place non-significant Moran in category 0.\n\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\nnga_wp$lag_pct_nonfunctional <- lag.listw(rswm_q, nga_wp$pct_nonfunctional, zero.policy = TRUE)\nDV <- nga_wp$lag_pct_nonfunctional - mean(nga_wp$pct_nonfunctional)\n\nLM_I <- localMI[,1] - mean(localMI[,1])    \n\nsignif <- 0.05       \n\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4   \n\nquadrant[localMI[,5]>signif] <- 0\n\n\n\nPlotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\npct_nonfunctional_map <- qtm(nga_wp, \"pct_nonfunctional\")+\n  tm_text(\"shapeName\",\n          remove.overlap = TRUE,\n          size = 0.6)+\n  tm_layout(main.title = \"Percentage of non-functional water points\", \n            main.title.size = 1)\n\nnga_wp.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)+\n  tm_text(\"shapeName\",\n          remove.overlap = TRUE,\n          size = 0.6)+\n  tm_layout(main.title = \"LISA Map\", \n            main.title.size = 1)\n\ntmap_arrange(pct_nonfunctional_map, LISAmap, asp=1, ncol=2)\n\n\n\n\n\nFrom the LISA map, we can see that the north-eastern region are low-low clusters, while some parts of the central-south region are high-high clusters."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#hot-spot-area-analysis",
    "href": "Take-home_Ex1/Take-home_Ex1.html#hot-spot-area-analysis",
    "title": "Take Home Exercise 1",
    "section": "7 Hot Spot Area Analysis",
    "text": "7 Hot Spot Area Analysis\nThe term ‘hot spot’ generically refers to a region or value that is higher relative to its surroundings.\n\n7.1 Getis and Ord’s G-Statistics\nThe Getis and Ord’s G-statistics looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\nDeriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whilst the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix - 1) fixed distance weight matrix, and 2) adaptive distance weight matrix.\n\n\nDeriving the centroid\nWe use st_centroid() and map_dbl() to find the coordinates, and then use cbind() to put them into the same object.\n\ncoord1 <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[1]])\ncoord2 <- map_dbl(nga_wp$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(coord1, coord2)\n\n\n\nDetermine the cut-off distance for fixed distance weight matrix\nWe need to determine the upper limit for the nearest neighbour of each polygon to ensure that all units will have at least one neighbour.\nThe following steps are performed:\n\nUse knearneigh() of spdep package to return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number IDs by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep package. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = FALSE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   2663   12812   20237   22050   27702   71724 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 71724 m, so we will use this to ensure that all units will have at least one neighbour.\n\n\nComputing fixed distance weight matrix\ndnearneigh() is used to compute the distance weight matrix below:\n\nwm_d71724 <- dnearneigh(coords, 0, 71724, longlat = FALSE)\nwm_d71724\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 17986 \nPercentage nonzero weights: 3.00229 \nAverage number of links: 23.23773 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\nwm71724_lw <- nb2listw(wm_d71724, style = 'B', zero.policy = TRUE)\n\n\n\nComputing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothenes the neighbour relationship across more neighbours.\nThus, we will also compute the adaptive distance weight matrix based on the k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used again to convert the nb object into spatial weights object.\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 6192 \nPercentage nonzero weights: 1.033592 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n  8 \n774 \n774 least connected regions:\nwith 8 links\n774 most connected regions:\nwith 8 links\n\nWeights style: B \nWeights constants summary:\n    n     nn   S0    S1     S2\nB 774 599076 6192 11152 201942\n\n\n\n\n\n7.2 Computing Gi statistics\n\nGi statistics using fixed distance\nlocalG() is used to compute the Gi statistics using the fixed distance weight matrix.\n\nfips <- order(nga_wp$pct_nonfunctional)\ngi.fixed <- localG(nga_wp$pct_nonfunctional, wm71724_lw, zero.policy = TRUE)\ngi.fixed\n\n  [1]  3.230273338  3.118331403 -2.425177489  0.255680828  7.892511047\n  [6] -1.778839470 -1.863996577 -2.828371823 -1.311231166  1.540188440\n [11] -0.278646817  0.685338824  3.269578577 -2.222498848 -3.812767686\n [16]  2.105004025 -1.161973580 -0.693388144  0.044400364  0.088921735\n [21]  3.605677792 -3.425235470 -2.679981506  1.300140755  0.286185619\n [26] -0.428517857  0.447926453  0.673508590  0.396982033  2.321716546\n [31]  3.730612756 -3.687048544 -4.496250567  2.179017538 -0.828879808\n [36]  1.395691479  3.861651758  3.293434525  2.597586152  2.558850583\n [41]  2.099572425  4.732181675 -1.185894669  2.069161463  2.670563825\n [46]  0.758046892 -3.814946309  2.242358784 -3.683223765  0.874632407\n [51] -3.865540049 -2.871807724 -0.884342322 -2.472758158  3.080129824\n [56] -2.140114761  0.395148646 -0.102836416 -0.352750657  2.961211621\n [61]  4.238416325 -3.580652283  0.189323598  1.224654078  1.582006676\n [66]  3.706371621  1.215089071 -0.243053366  0.375562029  1.718605587\n [71]  2.320514470 -1.386709302 -1.211931029  1.048422415 -3.768371502\n [76]  0.872681489 -2.773027329 -2.687299951 -3.019785295 -2.170634636\n [81] -3.056094077 -4.311437529 -2.705793337  2.961844302 -4.806584212\n [86]  4.837932168 -1.082368489 -0.115984361 -1.046387287  0.157508028\n [91] -2.972151783 -0.415353898  0.024588691  3.358716245 -1.322955368\n [96] -1.620841296 -1.268361988 -1.495504120 -2.110279052  0.135585129\n[101] -3.998178452 -0.134366300  1.294596268  2.677357491 -4.764072791\n[106]  0.783188373  0.366816079 -1.189251119  1.094970949 -3.152259988\n[111] -3.583575798  1.946459888  2.111634712 -1.597990822 -1.894292278\n[116]  0.740733683 -1.830670627  0.363047479 -0.016916893  2.211134330\n[121]  4.401931336  2.198525812  0.268804468  1.819665395  0.484361038\n[126]  1.500331734 -3.101002504  0.258575883 -1.139282353 -4.658984154\n[131]  2.082910373 -2.355913551  0.329119676  4.810869374  0.537770390\n[136]  5.635489340  5.537435557 -0.098019652 -2.170038150 -1.742524851\n[141]  0.433092422 -5.264858862 -2.461242722 -0.967521764 -4.380127387\n[146] -2.391482400 -2.590639843  2.375642489 -0.103499871  0.076189940\n[151] -0.941983302  0.616189245 -1.908681756 -1.686434026 -5.236620456\n[156] -4.726500536 -0.609695232  3.254730359 -1.542658914 -3.842024339\n[161] -1.435927543  3.082812673  0.767324623  2.176631262 -2.112170619\n[166] -3.945211036 -1.399774718 -2.551655337  5.848903768 -2.258809126\n[171]  0.062570687  1.856929462  1.470263739  0.453672413  2.411371028\n[176] -2.061157251 -3.219128244 -0.691215695  1.149290611  3.979919571\n[181] -0.793195721  0.457015862  3.126317057  7.838883046  1.894948681\n[186]  3.289780206  2.086452660  2.485895538 -1.516116531  2.422609788\n[191] -0.789304821  2.633088460 -3.460719577 -3.364904445 -3.353082020\n[196] -2.835430019  3.891311707  3.794995514  1.632547559  3.544710541\n[201]  3.026889362  6.865415569  6.271024582  1.129547515  5.109243108\n[206]  4.234010714 -3.210554301  5.694157560  8.354921541  5.108040499\n[211]  4.677206267  5.171492900  0.523650383 -3.484437521 -3.673704948\n[216]  1.534216976 -1.934449638 -2.209062084 -5.036717190  1.707619793\n[221] -0.861333753  0.819875699 -0.901037622  1.929647019 -2.168404926\n[226]  0.077728647 -5.102219108  1.857898888 -3.774564021 -2.297289925\n[231] -1.316574394 -0.527883962 -3.802917208 -3.901304444 -4.371130866\n[236]  0.139943831 -0.303538984 -4.485193944  0.273422295  0.532624921\n[241] -1.956985195 -5.434555700 -1.021186616 -1.126927513  0.318900206\n[246]  2.801941497  2.364516770 -1.858283645 -0.322530466 -2.903788491\n[251]  1.266716725 -2.057208471 -1.010614528  2.065412344 -3.915192051\n[256]  0.477017471  1.532187465 -2.902692067 -0.455215383 -1.620245661\n[261] -4.211469529  0.881706892  0.668840478 -5.122960199  1.514986854\n[266] -1.756797622 -4.528778169  1.207668439  2.450063301 -1.914927980\n[271] -2.283605777 -4.438002159 -1.429049148  1.102356627 -1.004537388\n[276] -0.997697757 -1.233087566 -1.291008681 -1.193077955  1.000593702\n[281] -1.656868450 -1.706977273 -1.504274909 -3.431363399  6.654168322\n[286]  7.741448461  0.190410236  7.053474025  3.159549523  2.767525912\n[291] -2.623580625 -2.243948211 -1.561078411 -2.041066409 -1.310925174\n[296]  2.285828469 -3.625772687  2.016112655  1.932352041  1.335074223\n[301]  1.887421074  2.671334525  2.229106298  2.139494519  1.194659173\n[306] -3.478351319  1.815038914  0.949800456 -2.328764358  0.082153089\n[311]  0.327321875  2.971053640 -1.485306961  0.163491472  1.340548467\n[316] -0.933928473 -0.994184866 -1.790662528  1.956054197  3.025136057\n[321]  4.877113725  2.379581727  3.371865250 -1.435299573 -0.744059241\n[326] -3.530271228 -3.634635974  1.884859294  2.459191497 -0.768713924\n[331]  6.380240771 -3.610448838  6.085122553  6.061236277  3.747407478\n[336] -0.744595546 -1.439340961  4.173292245  2.313527231  3.313157911\n[341]  2.237399132  2.289901981  2.336611468  2.038405945  0.642444790\n[346]  1.548681140  1.384459701  1.381755493 -0.107328746 -2.176406172\n[351]  5.227800091 -3.821507649  2.941375995 -0.068271449  1.982353821\n[356]  1.474037227  2.329695889  0.037903931  0.181611276  2.438313770\n[361] -1.282777442 -2.848021467 -3.123413720  3.170301383  2.861446444\n[366] -1.267183003  2.074259403 -1.622314189 -0.483604003  3.452484534\n[371]  3.099898502 -1.818726125 -2.751128010 -0.904610599  7.502695859\n[376] -1.216526710 -1.497949873 -0.008230705 -1.652822939  0.690975856\n[381] -1.085138793 -4.567463878 -2.074776731 -0.238529040 -3.576645028\n[386]  2.241795794  0.627676533 -3.294118511 -0.921113098 -1.550792744\n[391] -0.799556985 -1.009135774  3.139239332 -5.101749581  0.855188233\n[396]  1.854344189  2.931665870 -3.505145119 -2.359775725 -3.203002773\n[401]  0.631874090 -0.280048971  0.053789406 -1.689079440 -1.516561193\n[406] -2.972151783  2.040768990 -0.143378080 -1.486850272 -2.657825576\n[411] -1.760336518 -2.981187216 -5.153844079 -2.611609587 -4.295478823\n[416]  0.440726345  0.859760669 -1.571014262  0.167353504 -0.503369039\n[421]  1.298534497 -3.555016669 -0.271941953 -1.061688707  0.624332683\n[426] -3.061638541  0.954007482  1.886133923  0.796088647  4.735706513\n[431] -3.997186972  0.903362602 -3.706427201 -3.617815371 -4.108006201\n[436]  1.051683684  1.646144617  0.154686148  2.922985189 -3.257793209\n[441] -0.119414502  1.412094307 -3.575359928 -1.721499110 -0.827621190\n[446]  0.732256873 -2.972151783 -5.169733993 -4.281061756 -4.997210768\n[451] -2.312631514  0.511196316 -3.036136419  0.794721264  2.511919315\n[456]  0.506236238  1.065383682 -0.545970905  0.819934405 -0.298014717\n[461] -3.836205949 -3.513239009 -0.064111182 -1.115625444 -0.733322059\n[466]  1.358374629 -1.360142579  0.697470696 -2.189529787  0.506718499\n[471]  2.349090564 -2.634077590  0.013342662 -4.623236577 -4.057465681\n[476]  1.431210831 -3.249458860 -0.409989781 -2.846055153 -3.458477403\n[481]  2.531361892  2.849658270 -4.076212212  2.657422329 -3.865622722\n[486] -2.860171850 -1.218843045 -1.343819198 -1.836635405  0.472769269\n[491] -1.394611714 -3.434175973 -0.494753574  0.236884379 -0.496095729\n[496] -3.207920879 -1.215462389 -1.436130555  6.062558609  0.561213449\n[501] -4.016898919 -1.140385770 -4.732492437 -0.350440810  7.507949572\n[506]  2.058958088 -2.425177489  0.097962122 -4.211469529  2.597277851\n[511]  0.238643047 -0.432604816  0.295243402 -3.597426495 -3.601533509\n[516]  0.735659987  1.572594383 -1.018317030 -5.387560460  1.722443177\n[521]  0.649473920 -0.817293390  0.833963115  0.670127225 -3.434175973\n[526] -3.655746077  1.729606530  1.590696697 -2.552859639 -1.902297114\n[531] -2.059654445 -2.926989675 -3.049509287 -3.374664602 -2.364194673\n[536] -1.740270616 -2.108379012  7.788884403  8.175008770  8.090377726\n[541] -1.117397248 -0.700113233 -2.182655722 -3.660931775  0.674652935\n[546]  0.935901437  0.893264285  4.099224458  0.079075462  2.277960339\n[551]  5.498495797  1.385708392 -1.013630874  0.325532897 -1.245806794\n[556]  2.359777806  1.315627078 -3.724737950  7.107527360  1.253531230\n[561]  2.300585964  0.259341164 -0.969143936 -1.288341053  2.050089939\n[566]  0.123113075  0.003683659 -0.001625870 -1.049071898  3.533217917\n[571]  2.374178657  2.228208421 -1.213524959  1.833778956 -0.263348036\n[576] -1.430770174 -2.921283870  1.892454498 -3.453043022 -3.961068101\n[581] -0.237605709  1.965401107  2.637532733  3.662810951 -2.558362904\n[586]  2.443627457  7.483062426  5.445687831 -0.251986890  1.950936974\n[591]  0.453959167  1.756700585  1.309284567 -0.486552438 -0.947827984\n[596]  3.293958791  2.289673230 -1.055182688  2.614505986  2.773911444\n[601] -1.989595572 -0.792491380 -0.645983406  8.209164524  4.558263761\n[606]  3.890578527 -0.878336839  4.247212039  0.191597031  2.357858472\n[611] -2.512827069  1.261543928  6.759832651 -2.129254404 -1.946408570\n[616] -1.978780513  6.660596407 -3.544227447 -2.922634446  2.355915042\n[621] -0.239090076 -1.126988246 -3.575902701  2.703701478  1.721163523\n[626]  2.829671802  3.503586620  3.641957235  4.532093232  3.561922284\n[631] -0.502640247  0.284339410 -0.631446302  2.455159423  2.417669941\n[636] -2.228479201  3.812425202 -0.798047058 -1.674729853  1.260031699\n[641]  0.117180275 -1.476352895  2.989546284  1.742274352  1.199937949\n[646]  0.152087006  0.223549398 -0.004390793  0.113698183 -4.121122124\n[651] -3.091815610  1.157382442 -1.059669740 -4.828265699 -4.518134137\n[656] -0.564597449 -2.283349805 -3.133195427  0.222774523 -0.044246933\n[661]  0.050636192 -1.752564750  3.305697833  0.805952265 -0.976576997\n[666] -0.493677199 -1.535092427  0.308254518  4.472026098  0.166293563\n[671] -3.717496155  0.836378262  1.253813005 -0.591111769 -4.868363643\n[676] -2.372055093 -0.391226801 -0.314793960 -2.234082587  1.555183128\n[681]  0.652951399 -3.665744393  1.704089949 -0.038252188  1.472943906\n[686]  1.483508866 -1.355818375  3.776150213 -3.139430368  1.406684443\n[691] -2.802253957  2.600895271 -3.537904067  0.605327662  1.636146315\n[696] -1.860152920  2.877332601 -3.149583421  1.100075883 -0.878991656\n[701]  0.981930985  0.647434218 -5.090358361  1.781943648 -2.164697803\n[706] -4.856257185 -4.834946752 -1.740828427  2.492413925  0.108288564\n[711] -1.097069472 -4.603602338 -3.012309440 -0.608503556 -1.120583576\n[716] -3.577140198  5.414471450  6.106202611  4.479545419  5.159846566\n[721]  3.377323817  4.280940607  5.947522027  0.575780722  4.596558589\n[726]  2.895843598  2.098002876 -3.142081148  1.429782227  2.505156926\n[731] -5.052321063 -2.172159267  7.628932699  6.794262422  0.257946708\n[736]  1.102288960  5.892455268  7.977438368 -0.956710663  0.466443090\n[741]  0.708230780  0.565000928 -5.369511198 -2.333215437  3.734168595\n[746]  4.452215790  3.909386492  0.184508280 -0.404713774 -4.884929086\n[751]  0.603504601  0.645462504 -0.350581519  0.971509761  2.404670080\n[756]  1.852891820 -0.207198236 -1.542836021  1.141365205 -1.984219017\n[761]  1.620851541  1.369026965 -1.767066905 -2.473825726 -0.767898466\n[766] -1.799633970 -1.619843508 -2.552434248 -0.868492530  0.381752837\n[771]  0.113504018 -0.869109719 -1.585692792 -0.050526155\nattr(,\"cluster\")\n  [1] High High Low  High High Low  High Low  High High Low  High High Low  High\n [16] High Low  High High High High Low  Low  High High High Low  High Low  Low \n [31] High Low  Low  High Low  High High High High High High High Low  High Low \n [46] Low  Low  High Low  Low  Low  Low  Low  Low  High Low  High Low  Low  High\n [61] High Low  Low  High High Low  Low  Low  Low  High High Low  High High Low \n [76] High Low  Low  Low  High Low  High Low  Low  Low  Low  Low  Low  High Low \n [91] Low  Low  Low  High Low  High Low  Low  High Low  Low  High Low  High Low \n[106] Low  High Low  High Low  Low  High Low  Low  Low  High Low  Low  Low  High\n[121] High Low  Low  High Low  High Low  Low  Low  Low  High Low  High High High\n[136] Low  High High Low  Low  High High Low  High Low  Low  Low  High High High\n[151] High High Low  High Low  Low  Low  High Low  Low  High High High High Low \n[166] Low  Low  Low  High Low  High Low  Low  High High High Low  Low  Low  High\n[181] High Low  High High High Low  High Low  Low  Low  Low  Low  Low  Low  Low \n[196] High High High High High High High High High High High Low  High High High\n[211] High Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low \n[226] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High High Low  High High\n[241] Low  Low  Low  Low  High High High Low  High Low  High Low  High High High\n[256] Low  Low  Low  Low  High Low  High High Low  High Low  Low  High High Low \n[271] Low  High Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  High\n[286] High Low  High High High Low  Low  Low  Low  Low  Low  Low  High High High\n[301] High High High High High Low  High High Low  Low  Low  High Low  High Low \n[316] High High Low  High High High Low  High Low  Low  Low  Low  High High High\n[331] High Low  High High High Low  Low  High High High High High High High High\n[346] Low  High High Low  Low  High High High Low  High High Low  High Low  Low \n[361] Low  Low  High Low  High High High Low  High High High Low  Low  Low  High\n[376] High Low  Low  Low  High High Low  Low  High Low  High High Low  Low  Low \n[391] Low  High High Low  High High Low  Low  Low  Low  High High Low  Low  Low \n[406] Low  High Low  Low  Low  Low  Low  Low  Low  High High High Low  Low  Low \n[421] Low  Low  High Low  Low  Low  High High Low  High Low  High Low  Low  Low \n[436] High High High Low  Low  Low  High Low  Low  High High Low  Low  Low  Low \n[451] Low  High Low  High High High High Low  Low  High Low  Low  Low  Low  High\n[466] Low  High Low  High High Low  Low  Low  Low  Low  High Low  High Low  Low \n[481] Low  High Low  High Low  Low  Low  High Low  High Low  Low  Low  High High\n[496] Low  Low  Low  High Low  Low  Low  Low  Low  High High Low  High Low  High\n[511] High High High Low  Low  High High Low  High High High High High High Low \n[526] Low  High Low  Low  Low  High High Low  High High Low  Low  High High High\n[541] Low  Low  High Low  High Low  High High Low  High High High High High Low \n[556] High High Low  High High High Low  High Low  High Low  High High Low  High\n[571] Low  High High High Low  Low  Low  High Low  High Low  High High High High\n[586] High High High High Low  Low  High High Low  Low  High Low  High High High\n[601] Low  Low  Low  High High High High High Low  High Low  High High Low  Low \n[616] Low  High Low  Low  High Low  High Low  High High High High High High High\n[631] Low  High Low  High High High Low  Low  Low  High High Low  High High Low \n[646] Low  Low  Low  Low  Low  High High High Low  Low  Low  High Low  High High\n[661] High Low  High High High Low  High High High High High Low  High Low  Low \n[676] High Low  Low  Low  Low  High Low  Low  High Low  Low  Low  High Low  Low \n[691] Low  High Low  High Low  Low  High Low  High High High High Low  Low  Low \n[706] Low  Low  Low  High Low  Low  Low  High High Low  Low  High High Low  High\n[721] High High High High High High High Low  Low  High Low  Low  High High High\n[736] High High High Low  Low  High High Low  Low  High High High High Low  Low \n[751] High High High High High High High Low  High Low  High High Low  High Low \n[766] Low  Low  Low  Low  Low  High Low  Low  High\nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nga_wp$pct_nonfunctional, listw = wm71724_lw, zero.policy = TRUE)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe Gi statistics is represented as a Z-score, where greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nThe following code chunk joins the Gi values to their corresponding nga_wp sf data frame:\n\nas.matrix() is used to convert the output vector (i.e. gi.fixed) into r matrix object.\ncbind() is used to join nga_wp and gi.fixed matrix to produce a new SpatialPolygonDataFrame called nga_wp.gi.\nrename() is used to rename the field name of the gi values to gstat_fixed.\n\n\nnga_wp.gi <- cbind(nga_wp, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\nMapping Gi values with fixed distance weights\nNow, we can map the Gi values derived using fixed distance weight matrix.\n\npct_nonfunctional_map2 <- qtm(nga_wp, \"pct_nonfunctional\")+\n  tm_layout(main.title = \"Percentage of non-functional water points\", \n            main.title.size = 1)\n\nGimap <-tm_shape(nga_wp.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)+\n  tm_layout(main.title = \"Gi stat using fixed distance weight matrix\", \n            main.title.size = 1)\n\ntmap_arrange(pct_nonfunctional_map2, Gimap, asp=1, ncol=2)\n\n\n\n\n\nAs shown on the map on the right, the northern and north-east regions are cold spots, while the southern and south-west regions are hot spots.\n\n\n\nGi statistics using adaptive distance\nknb_lw() is used to compute the Gi statistics using the adaptive distance weight matrix.\n\nfips <- order(nga_wp$pct_nonfunctional)\ngi.adaptive <- localG(nga_wp$pct_nonfunctional, knn_lw)\nnga_wp.gi <- cbind(nga_wp, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nMapping Gi values with adaptive distance weights\nNow, we can map the Gi values derived using adaptive distance weight matrix.\n\npct_nonfunctional_map3 <- qtm(nga_wp, \"pct_nonfunctional\")+\n  tm_layout(main.title = \"Percentage of non-functional water points\", \n            main.title.size = 1)\n\nGimap2 <- tm_shape(nga_wp.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)+\n  tm_layout(main.title = \"Gi stat using adaptive distance weight matrix\", \n            main.title.size = 1)\n\ntmap_arrange(pct_nonfunctional_map3, \n             Gimap2, \n             asp=1, \n             ncol=2)\n\n\n\n\n\nUsing the adaptive distance weight matrix yielded similar results - the northern and north-east regions are cold spots, while the southern and south-west regions are hot spots."
  }
]